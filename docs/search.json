[
  {
    "objectID": "rational_epicardial_reprogramming.html",
    "href": "rational_epicardial_reprogramming.html",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "",
    "text": "Sys.time()\n\n[1] \"2023-03-08 17:58:01 CST\"\nSys.timezone()\n\n[1] \"America/Chicago\""
  },
  {
    "objectID": "rational_epicardial_reprogramming.html#preparation",
    "href": "rational_epicardial_reprogramming.html#preparation",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "Preparation",
    "text": "Preparation\nFunctions\nLoad required packages.\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(patchwork)\nlibrary(extrafont)\n\n\nsource(file = file.path(SCRIPT_DIR, \"utilities.R\"))\n\n\n`%+replace%` &lt;- ggplot2::`%+replace%`\n\nSymbols\n\nPROJECT_DIR &lt;- file.path(\n    \"/Users/jialei/Dropbox/Data/Projects/UTSW/Cellular_reprogramming\",\n    \"Cardiac_reprogramming/Notebooks\"\n)\n\n\ngene_symbols &lt;- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR, \"data\", \"misc\", \"genes.tsv\"\n    ),\n    col_names = FALSE\n)\n\ngene_symbols &lt;- setNames(object = gene_symbols$X2, nm = gene_symbols$X1)\ngene_symbols |&gt; head()\n\nENSMUSG00000051951 ENSMUSG00000089699 ENSMUSG00000102343 ENSMUSG00000025900 \n            \"Xkr4\"           \"Gm1992\"          \"Gm37381\"              \"Rp1\" \nENSMUSG00000109048 ENSMUSG00000025902 \n             \"Rp1\"            \"Sox17\" \n\n\n\nlength(gene_symbols)\n\n[1] 27999\n\n\nMatrix\n\nmatrix_readcount_use &lt;- Matrix::sparseMatrix(\n    i = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_indices.rds\"\n        )\n    ),\n    p = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_indptr.rds\"\n        )\n    ),\n    x = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_values.rds\"\n        )\n    ),\n    dims = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_shape.rds\"\n        )\n    ),\n    dimnames = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_dimnames.rds\"\n        )\n    ),\n    index1 = FALSE\n)\n\n\ndim(matrix_readcount_use)\n\n[1] 27999 34564\n\n\n\nrownames(matrix_readcount_use) &lt;- paste(\n    rownames(matrix_readcount_use),\n    gene_symbols[rownames(matrix_readcount_use)],\n    sep = \"_\"\n)\n\nmatrix_readcount_use[1:5, 1:5] |&gt;\n    as.matrix() |&gt;\n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\nBL5_AAACCTGCACTACAGT\nBL5_AAACCTGCAGTACACT\nBL5_AAACCTGGTTCACGGC\nBL5_AAACCTGGTTGCTCCT\nBL5_AAACCTGTCCAACCAA\n\n\n\nENSMUSG00000051951_Xkr4\n0\n0\n0\n0\n0\n\n\nENSMUSG00000089699_Gm1992\n0\n0\n0\n0\n0\n\n\nENSMUSG00000102343_Gm37381\n0\n0\n0\n0\n0\n\n\nENSMUSG00000025900_Rp1\n0\n0\n0\n0\n0\n\n\nENSMUSG00000109048_Rp1\n0\n0\n0\n0\n0\n\n\n\n\n\nEmbedding\n\nembedding &lt;- readRDS(\n    file = file.path(\n        PROJECT_DIR, \"data/10x/epicardial_10f_d7\", \"tsne_out_coords.rds\"\n    )\n)\n\n\ndim(embedding)\n\n[1] 22140     6\n\n\n\nCheck memory usage.\n\npurrr::walk(\n    list(matrix_readcount_use, embedding), \\(x) {\n        print(object.size(x), units = \"auto\", standard = \"SI\")\n    }\n)\n\n1.1 GB\n2.8 MB"
  },
  {
    "objectID": "rational_epicardial_reprogramming.html#clustering",
    "href": "rational_epicardial_reprogramming.html#clustering",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "Clustering",
    "text": "Clustering\n\nx_column &lt;- \"x\"\ny_column &lt;- \"y\"\n\nGEOM_POINT_SIZE &lt;- 0.5\nEMBEDDING_TITLE_PREFIX &lt;- \"t-SNE\"\nRASTERISED &lt;- FALSE\n\nEmbedding\n\nembedding |&gt;\n    tibble::rownames_to_column(var = \"cell\") |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(cluster) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(cluster),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**10x Genomics**; Clustering\")\n    )\n\n\n\n\n\n\n\n\n10x Genomics; Clustering\n    \n\n\n      cluster\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\n1\n3,240\n15,464.0\n3,820.0\n\n\n\n2\n2,259\n2,390.0\n997.0\n\n\n\n3\n1,914\n12,506.5\n3,352.5\n\n\n\n4\n1,707\n14,631.0\n3,845.0\n\n\n\n5\n1,330\n5,696.5\n1,564.5\n\n\n\n6\n1,329\n5,189.0\n1,451.0\n\n\n\n7\n1,222\n6,010.0\n2,147.0\n\n\n\n8\n1,213\n7,804.0\n2,151.0\n\n\n\n9\n1,093\n5,399.0\n2,239.0\n\n\n\n10\n1,082\n11,149.5\n3,049.0\n\n\n\n11\n850\n7,452.5\n2,738.0\n\n\n\n12\n848\n2,341.0\n773.0\n\n\n\n13\n638\n3,925.5\n985.0\n\n\n\n14\n578\n4,939.5\n2,170.5\n\n\n\n15\n508\n5,815.0\n1,808.0\n\n\n\n16\n404\n5,027.5\n1,714.0\n\n\n\n17\n393\n5,241.0\n2,151.0\n\n\n\n18\n380\n7,976.5\n2,464.5\n\n\n\n19\n299\n6,724.0\n2,777.0\n\n\n\n20\n280\n5,360.5\n1,906.5\n\n\n\n21\n148\n2,981.5\n1,140.5\n\n\n\n22\n117\n5,305.0\n1,954.0\n\n\n\n23\n95\n2,586.0\n1,370.0\n\n\n\n24\n92\n4,966.5\n280.0\n\n\n\n25\n64\n6,244.5\n2,619.5\n\n\n\n26\n57\n4,898.0\n251.0\n\n\nCount\n26\n—\n—\n—\n\n\nMean\n—\n—\n6,462.5\n1,989.2\n\n\nSum\n—\n22,140\n—\n—\n\n\n\n\n\n\n\nembedding &lt;- embedding |&gt;\n    tibble::rownames_to_column(var = \"cell\") |&gt;\n    dplyr::mutate(\n        group = dplyr::case_when(\n            category %in% c(\"BL5\", \"BL6\") ~ \"Primary\",\n            category %in% c(\"BL7\") ~ \"Control\",\n            TRUE ~ \"Reprogrammed\"\n        ),\n        group = factor(\n            group,\n            levels = c(\"Primary\", \"Reprogrammed\", \"Control\")\n        )\n    )\n\nCluster\n\np_embedding_cluster &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$cluster |&gt; as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Cluster\"),\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_UMI &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = log10(Matrix::colSums(matrix_readcount_use[, embedding$cell])),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_MT &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = (colSums(matrix_readcount_use[\n        stringr::str_detect(\n            string = stringr::str_remove(\n                string = rownames(matrix_readcount_use),\n                pattern = \"^E.+_\"\n            ),\n            pattern = \"mt-\"\n        ),\n    ]) / colSums(matrix_readcount_use))[embedding$cell],\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; MT %\"),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    shuffle_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) + theme_customized_embedding()\n\np_embedding_group &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$group |&gt; as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Group\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding() +\n    ggplot2::scale_color_manual(\n        values = c(\n            Primary = \"#00AFBB\",\n            Reprogrammed = \"#8BC34A\",\n            Control = \"#E7B800\"\n        )\n    )\n\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(cluster) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(cluster),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**10x Genomics**; Clustering\")\n    )\n\n\n\n\n\n\n\n\n10x Genomics; Clustering\n    \n\n\n      cluster\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\n1\n3,240\n15,464.0\n3,820.0\n\n\n\n2\n2,259\n2,390.0\n997.0\n\n\n\n3\n1,914\n12,506.5\n3,352.5\n\n\n\n4\n1,707\n14,631.0\n3,845.0\n\n\n\n5\n1,330\n5,696.5\n1,564.5\n\n\n\n6\n1,329\n5,189.0\n1,451.0\n\n\n\n7\n1,222\n6,010.0\n2,147.0\n\n\n\n8\n1,213\n7,804.0\n2,151.0\n\n\n\n9\n1,093\n5,399.0\n2,239.0\n\n\n\n10\n1,082\n11,149.5\n3,049.0\n\n\n\n11\n850\n7,452.5\n2,738.0\n\n\n\n12\n848\n2,341.0\n773.0\n\n\n\n13\n638\n3,925.5\n985.0\n\n\n\n14\n578\n4,939.5\n2,170.5\n\n\n\n15\n508\n5,815.0\n1,808.0\n\n\n\n16\n404\n5,027.5\n1,714.0\n\n\n\n17\n393\n5,241.0\n2,151.0\n\n\n\n18\n380\n7,976.5\n2,464.5\n\n\n\n19\n299\n6,724.0\n2,777.0\n\n\n\n20\n280\n5,360.5\n1,906.5\n\n\n\n21\n148\n2,981.5\n1,140.5\n\n\n\n22\n117\n5,305.0\n1,954.0\n\n\n\n23\n95\n2,586.0\n1,370.0\n\n\n\n24\n92\n4,966.5\n280.0\n\n\n\n25\n64\n6,244.5\n2,619.5\n\n\n\n26\n57\n4,898.0\n251.0\n\n\nCount\n26\n—\n—\n—\n\n\nMean\n—\n—\n6,462.5\n1,989.2\n\n\nSum\n—\n22,140\n—\n—\n\n\n\n\n\n\n\npurrr::reduce(\n    list(\n        p_embedding_cluster,\n        p_embedding_UMI,\n        p_embedding_MT,\n        p_embedding_group\n    ),\n    `+`\n) +\n    patchwork::plot_layout(ncol = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\n\nlibrary(formattable)\n\n\nAttaching package: 'formattable'\n\n\nThe following object is masked from 'package:patchwork':\n\n    area\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(group) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    formattable::formattable(\n        list(\n            # num_cells = formattable::color_tile(\"transparent\", \"lightpink\"),\n            num_cells = formattable::color_bar(\"Lightpink\"),\n            median_umis = formattable::color_bar(\"lightgreen\"),\n            median_features = formattable::color_bar(\"lightblue\")\n        ),\n        full_width = FALSE,\n        caption = \"10x Genomics; Group\"\n    )\n\n\n\n\n10x Genomics; Group\n\n\n\ngroup\n\n\nnum_cells\n\n\nmedian_umis\n\n\nmedian_features\n\n\n\n\n\nPrimary\n\n\n11935\n\n\n4672\n\n\n1620\n\n\n\n\nReprogrammed\n\n\n5291\n\n\n10534\n\n\n3043\n\n\n\n\nControl\n\n\n4914\n\n\n13713\n\n\n3571\n\n\n\n\n\n\n\npurrr::map(levels(embedding$group), \\(x) {\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = as.integer(embedding$group == x) |&gt; as.factor(),\n        label = glue::glue(\n            \"{EMBEDDING_TITLE_PREFIX}; {x}: {sum(embedding$group == x)}\"\n        ),\n        color_labels = FALSE,\n        color_legend = FALSE,\n        sort_values = FALSE,\n        shuffle_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = GEOM_POINT_SIZE\n    ) +\n        theme_customized_embedding() +\n        ggplot2::scale_color_manual(\n            values = c(\"grey70\", \"salmon\")\n        )\n}) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nExtract colors from the initial plots to keep colors consistent.\n\ncolor_palette &lt;- ggplot2::ggplot_build(p_embedding_cluster)$data[[1]] |&gt;\n    dplyr::select(color = colour, cluster = group) |&gt;\n    unique() |&gt;\n    dplyr::arrange(cluster)\n\ncolor_palette &lt;- setNames(\n    object = color_palette$color,\n    nm = color_palette$cluster\n)\n\nscales::show_col(color_palette)\n\n\n\n\n\n\n\nPolished\n\np_embedding_cluster &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$cluster |&gt; as.factor(),\n    label = NULL,\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(void = TRUE)\n\np_embedding_cluster\n\n\n\n\n\n\n\n\ncluster_labels &lt;- embedding |&gt;\n    dplyr::group_by(cluster) |&gt;\n    dplyr::summarise(\n        x = median(x),\n        y = median(y)\n    ) |&gt;\n    as.data.frame()\ncluster_labels[25, c(2, 3)] &lt;- c(-32.5, -8.5)\n\npolygon_coordinates_cluster10 &lt;- data.frame(\n    x = c(\n        -23, -26, -26, -24, -25.5, -27, -25, -24, -23, -20.5,\n        -18.5, -18, -19.5, -18.5, -19, -18, -18, -17.5, -17, -15.5,\n        -17, -16, -15, -14, -12, -11.5, -12, -10.5, -10.5, -9.5,\n        -9, -7, -7, -6, -5, -5.5, -5.5, -5.5, -5, -5,\n        -3.5, -6, -9, -9.5, -11.5, -13, -19\n    ),\n    y = c(\n        -25, -21, -18, -15, -14.5, -11, -4, -1, 3, 0,\n        3, 2.5, -7, -9, -12, -11, -12.5, -12, -11, -10.5,\n        -9, -8, -8, -10, -9.5, -10.5, -14, -14.5, -13, -12.5,\n        -11.5, -11, -12, -12, -12, -15, -18, -18, -18, -19,\n        -20, -22, -21, -23, -25, -25.5, -25.5\n    )\n)\n\nlayers &lt;- list(\n    ggplot2::annotate(\n        geom = \"text\",\n        x = cluster_labels[, \"x\"],\n        y = cluster_labels[, \"y\"], label = cluster_labels[, 1],\n        parse = TRUE,\n        size = 2,\n        color = c(\"black\")\n    ),\n    ggplot2::geom_polygon(\n        data = polygon_coordinates_cluster10,\n        ggplot2::aes(x, y), fill = NA, color = \"black\", linewidth = .3\n    ),\n    ggplot2::annotate(\n        geom = \"path\",\n        x = -32.5 + 2.5 * cos(seq(0, 2 * pi, length.out = 100)),\n        y = -17 + 32.5 / 16.5 * 2.5 * sin(seq(0, 2 * pi, length.out = 100)),\n        color = \"#00BFC4\",\n        linewidth = .3\n    )\n)\n\np_embedding_reprogrammed &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = as.integer(embedding$group == \"Reprogrammed\") |&gt; as.factor(),\n    label = NULL,\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(void = TRUE) +\n    ggplot2::scale_color_manual(\n        values = c(\"grey70\", \"salmon\")\n    ) +\n    layers +\n    ggplot2::annotate(\n        geom = \"text\",\n        x = -82.06687,\n        y = 76.43042,\n        label = \"10F\\nreprogrammed\\nMEFs\",\n        family = \"Arial\",\n        color = \"#FF5722\",\n        size = 2.5,\n        vjust = \"inward\", hjust = \"inward\"\n    ) +\n    ggplot2::annotate(\n        geom = \"text\",\n        family = \"Arial\",\n        x = -72,\n        y = -67,\n        label = \"Primary\\nepicardial cells\",\n        color = \"#00BFC4\",\n        size = 2,\n        vjust = \"inward\", hjust = \"inward\"\n    ) +\n    ggplot2::annotate(\n        geom = \"segment\",\n        x = -42,\n        xend = -35,\n        y = -55,\n        yend = -24,\n        color = \"#00BFC4\", size = .2,\n        arrow = ggplot2::arrow(\n            length = ggplot2::unit(1, \"mm\"), ends = \"last\",\n            type = \"closed\"\n        )\n    )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\np_embedding_uninfected &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = as.integer(embedding$group == \"Control\") |&gt; as.factor(),\n    label = NULL,\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized() +\n    theme_customized_void() +\n    ggplot2::scale_color_manual(\n        values = c(\"grey70\", \"salmon\")\n    ) +\n    layers +\n    ggplot2::annotate(\n        geom = \"text\",\n        x = -82.06687,\n        y = 76.43042,\n        label = \"Uninfected\\nMEFs\",\n        family = \"Arial\",\n        color = \"#FF5722\",\n        size = 2.5,\n        vjust = \"inward\", hjust = \"inward\"\n    )\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\nlist(\n    p_embedding_reprogrammed,\n    p_embedding_uninfected\n) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nComposition\n\ncalc_group_composition(\n    data = embedding,\n    x = \"cluster\",\n    group = \"group\"\n) |&gt;\n    dplyr::mutate(\n        cluster = factor(\n            cluster\n        )\n    ) |&gt;\n    plot_barplot(\n        x = \"cluster\",\n        y = \"percentage\",\n        z = \"group\",\n        legend_ncol = 1,\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            Primary = \"#00AFBB\",\n            Reprogrammed = \"#8BC34A\",\n            Control = \"#E7B800\"\n        )\n    )\n\n\n\n\n\n\n\n\nclusters_selected &lt;- c(1, 3, 4, 6, 10, 16, 17, 22)\n\npurrr::map(clusters_selected, \\(x) {\n    cells_1 &lt;- embedding$cell[\n        (embedding$cluster == x) & (embedding$category == \"BL8\")\n    ]\n    cells_2 &lt;- embedding$cell[\n        (embedding$cluster == x) & (embedding$category == \"BL7\")\n    ]\n    data.frame(\n        cluster = x,\n        ratio = length(cells_1) / length(cells_2)\n    )\n}) |&gt;\n    dplyr::bind_rows() |&gt;\n    dplyr::mutate(\n        cluster = factor(\n            cluster,\n            levels = clusters_selected |&gt; rev()\n        )\n    ) |&gt;\n    ggplot(\n        aes(\n            y = cluster,\n            x = ratio,\n            fill = cluster\n        )\n    ) +\n    ggplot2::geom_bar(stat = \"identity\") +\n    theme_customized_violin() +\n    ggplot2::guides(fill = \"none\") +\n    ggplot2::scale_y_discrete(\n        name = \"MEF-derived cluster\"\n    ) +\n    ggplot2::scale_x_continuous(\n        name = \"Ratio\\n(reprogrammed / uninfected MEF)\",\n        breaks = seq(1, 9, 2)\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            rep(\"grey35\", 3),\n            \"#FF5722\",\n            rep(\"grey35\", 4)\n        )\n    ) +\n    ggplot2::geom_vline(xintercept = 1, linetype = 2, size = .2)"
  },
  {
    "objectID": "rational_epicardial_reprogramming.html#expression",
    "href": "rational_epicardial_reprogramming.html#expression",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "Expression",
    "text": "Expression\nEmbedding\n\nFEATURES_SELECTED &lt;- c(\n    \"ENSMUSG00000009471_Myod1\",\n    \"ENSMUSG00000026414_Tnnt2\",\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\",\n    \"ENSMUSG00000049382_Krt8\",\n    \"ENSMUSG00000079018_Ly6c1\",\n    \"ENSMUSG00000049436_Upk1b\",\n    \"ENSMUSG00000021391_Cenpp\"\n)\n\n\npurrr::map(FEATURES_SELECTED, \\(x) {\n    selected_feature &lt;- x\n\n    cat(selected_feature, \"\\n\")\n    values &lt;- log10(\n        calc_cpm(matrix_readcount_use[, embedding$cell])\n        [selected_feature, ] + 1\n    )\n\n    p1 &lt;- plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = values,\n        label = paste(\n            EMBEDDING_TITLE_PREFIX,\n            selected_feature |&gt; stringr::str_remove(pattern = \"^E.+_\"),\n            sep = \"; \"\n        ),\n        color_legend = TRUE,\n        sort_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = GEOM_POINT_SIZE * 1.25,\n        na_value = \"grey80\"\n    ) +\n        theme_customized_embedding()\n\n    return(p1)\n}) |&gt;\n    # unlist(recursive = FALSE) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\nENSMUSG00000009471_Myod1 \nENSMUSG00000026414_Tnnt2 \nENSMUSG00000016458_Wt1 \nENSMUSG00000025105_Bnc1 \nENSMUSG00000049382_Krt8 \nENSMUSG00000079018_Ly6c1 \nENSMUSG00000049436_Upk1b \nENSMUSG00000021391_Cenpp \n\n\n\n\n\n\n\n\nBar plot\n\nbarplot_helper &lt;- function(cells, features, matrix_readcount) {\n    purrr::map(names(cells), \\(x) {\n        calc_cpm(matrix_readcount)[\n            features,\n            colnames(matrix_readcount) %in% cells[[x]]\n        ] |&gt;\n            Matrix::rowMeans() |&gt;\n            tibble::enframe(name = \"feature\") |&gt;\n            dplyr::mutate(group = x)\n    }) |&gt;\n        dplyr::bind_rows()\n}\n\n\ncells_barplot &lt;- list(\n    embedding |&gt;\n        dplyr::filter(\n            cluster == 25 & category %in% c(\"BL5\", \"BL6\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            cluster == 10 & category %in% c(\"BL8\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            cluster != 10 & category %in% c(\"BL8\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            category %in% (\"BL7\")\n        ) |&gt;\n        dplyr::pull(cell)\n)\nnames(cells_barplot) &lt;- c(\n    \"Primary epi.\", \"Cluster10\",\n    \"Other\", \"Uninfected MEF\"\n)\n\nfeatures_barplot &lt;- c(\n    \"ENSMUSG00000021950_Anxa8\",\n    \"ENSMUSG00000015627_Gata5\",\n    \"ENSMUSG00000031517_Gpm6a\",\n    \"ENSMUSG00000020911_Krt19\",\n    \"ENSMUSG00000049436_Upk1b\"\n)\n\nbarplot_helper(cells_barplot, features_barplot, matrix_readcount_use) |&gt;\n    dplyr::mutate(\n        feature = stringr::str_remove(string = feature, pattern = \"^.+_\")\n    ) |&gt;\n    dplyr::mutate(\n        value = log10(value + 1),\n        group = factor(group, levels = names(cells_barplot))\n    ) |&gt;\n    plot_barplot_simple(\n        x = \"group\",\n        y = \"value\",\n        z = \"feature\",\n        y_title = expression(\"Avg expr; log\"[10] * \" (CPM + 1)\")\n    ) +\n    theme_customized_violin(\n        strip_background_fill = \"grey80\",\n        panel_border_color = \"black\",\n        axis_text_x_angle = c(90, 1, 0.5)\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            c(\n                \"#00BFC4\",\n                \"#FF5722\",\n                \"grey35\",\n                \"grey35\"\n            )\n        )\n    )"
  },
  {
    "objectID": "rational_epicardial_reprogramming.html#enrichment-of-exogenous-factors",
    "href": "rational_epicardial_reprogramming.html#enrichment-of-exogenous-factors",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "Enrichment of exogenous factors",
    "text": "Enrichment of exogenous factors\n\nfeatures_selected_10 &lt;- c(\n    \"ENSMUSG00000026628_Atf3\",\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\",\n    \"ENSMUSG00000051910_Sox6\",\n    \"ENSMUSG00000045680_Tcf21\",\n    \"ENSMUSG00000038193_Hand2\",\n    \"ENSMUSG00000031965_Tbx20\",\n    \"ENSMUSG00000032419_Tbx18\",\n    \"ENSMUSG00000005836_Gata6\",\n    \"ENSMUSG00000036098_Myrf\"\n)\n\n\nclusters_selected &lt;- c(1, 3, 4, 6, 10, 16, 17, 22)\n\nenriched_factors &lt;- do.call(\n    rbind.data.frame,\n    lapply(clusters_selected, \\(x) {\n        cells_1 &lt;- embedding$cell[\n            embedding$cluster == x & embedding$category == \"BL8\"\n        ]\n        cells_2 &lt;- embedding$cell[\n            embedding$cluster != x & embedding$category == \"BL8\"\n        ]\n        cat(x, length(cells_1), length(cells_2), \"\\n\")\n\n        de_paired &lt;- detect_de(\n            cell_group_a = cells_1,\n            cell_group_b = cells_2,\n            matrix_readcount = matrix_readcount_use,\n            matrix_cpm = calc_cpm(matrix_readcount_use),\n            only_enrichment = TRUE\n        ) |&gt;\n            dplyr::mutate(category = x) |&gt;\n            tibble::rownames_to_column(var = \"feature\") |&gt;\n            dplyr::filter(feature %in% features_selected_10)\n    })\n) |&gt;\n    dplyr::filter(category %in% clusters_selected) |&gt;\n    dplyr::mutate(\n        category = factor(category,\n            levels = clusters_selected\n        ),\n        symbol = stringr::str_remove(\n            string = feature,\n            pattern = \"^.+_\"\n        )\n    )\n\n1 1473 3818 \n3 932 4359 \n4 826 4465 \n6 687 4604 \n10 974 4317 \n16 178 5113 \n17 87 5204 \n22 61 5230 \n\n\n\nDifferential expression analysis of 10F in MEF-derived clusters, as compared with all other reprogrammed cells. Each dot represents a gene (colored by fold change and sized by p value).\n\nggplot2::ggplot() +\n    ggplot2::geom_abline(intercept = 0, slope = 1, linetype = 2) +\n    ggplot2::geom_point(\n        data = enriched_factors,\n        ggplot2::aes(positive_frac_b,\n            positive_frac_a,\n            size = -log10(pval_adj),\n            color = log2_effect\n        ),\n        alpha = .8,\n        stroke = 0, shape = 16\n    ) +\n    ggplot2::facet_wrap(\n        ~category,\n        ncol = 2,\n        labeller = ggplot2::labeller(\n            category = setNames(\n                object = paste(\"Cluster\", clusters_selected),\n                nm = clusters_selected\n            )\n        )\n    ) +\n    ggplot2::coord_fixed() +\n    ggplot2::scale_color_viridis_c(\n        name = expression(paste(\"Log\"[2], \" effect\"))\n    ) +\n    ggplot2::scale_size_continuous(\n        name = expression(paste(\"-log\"[10], \" (p-value)\"))\n    ) +\n    ggplot2::guides(\n        color = ggplot2::guide_colorbar(order = 1),\n        size = ggplot2::guide_legend(order = 2)\n    ) +\n    ggplot2::scale_x_continuous(\n        name = \"Expr (%, other reprogrammed cells)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Expr (%, indicated cluster)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    theme_customized_violin() +\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        legend.margin = ggplot2::margin(\n            t = 0, r = 0, b = 0, l = 0, unit = \"mm\"\n        ),\n        legend.key.size = ggplot2::unit(2.5, \"mm\"),\n        legend.text = ggplot2::element_text(family = \"Arial\", size = 6),\n        legend.title = ggplot2::element_text(family = \"Arial\", size = 6),\n        legend.position = \"right\",\n        # legend.box = \"horizontal\",\n        legend.box = \"vertical\",\n        legend.box.background = ggplot2::element_blank()\n    ) +\n    ggrepel::geom_text_repel(\n        data = enriched_factors,\n        ggplot2::aes(\n            positive_frac_b,\n            positive_frac_a,\n            label = symbol\n        ),\n        #\n        size = 5 / ggplot2::.pt,\n        family = \"Arial\",\n        box.padding = .2,\n        point.padding = .2,\n        nudge_y = .15,\n        arrow = ggplot2::arrow(length = ggplot2::unit(.02, \"npc\")),\n        segment.color = \"grey35\",\n        color = \"black\"\n    )"
  },
  {
    "objectID": "rational_epicardial_reprogramming.html#r-session-info",
    "href": "rational_epicardial_reprogramming.html#r-session-info",
    "title": "Rational Epicardial Reprogramming with 10 Transcription Factors by Reprogram-Seq",
    "section": "R session info",
    "text": "R session info\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Ventura 13.2.1\n system   aarch64, darwin22.1.0\n ui       unknown\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-03-08\n pandoc   2.19.2 @ /Users/jialei/.pyenv/shims/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n bit           4.0.5      2022-11-15 [1] CRAN (R 4.2.2)\n bit64         4.0.5      2020-08-30 [1] CRAN (R 4.2.2)\n cachem        1.0.7      2023-02-24 [1] CRAN (R 4.2.2)\n callr         3.7.3      2022-11-02 [1] CRAN (R 4.2.2)\n cli           3.6.0      2023-01-09 [1] CRAN (R 4.2.2)\n colorspace    2.1-0      2023-01-23 [1] CRAN (R 4.2.2)\n commonmark    1.8.1      2022-10-14 [1] CRAN (R 4.2.1)\n crayon        1.5.2      2022-09-29 [1] CRAN (R 4.2.1)\n devtools      2.4.5.9000 2023-03-08 [1] Github (r-lib/devtools@cfa1ba9)\n digest        0.6.31     2022-12-11 [1] CRAN (R 4.2.2)\n dplyr       * 1.1.0.9000 2023-03-08 [1] Github (tidyverse/dplyr@e12fd49)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.2)\n evaluate      0.20       2023-01-17 [1] CRAN (R 4.2.2)\n extrafont   * 0.19       2023-01-18 [1] CRAN (R 4.2.2)\n extrafontdb   1.0        2012-06-11 [1] CRAN (R 4.2.0)\n fansi         1.0.4      2023-01-22 [1] CRAN (R 4.2.2)\n farver        2.1.1      2022-07-06 [1] CRAN (R 4.2.2)\n fastmap       1.1.1      2023-02-24 [1] CRAN (R 4.2.2)\n forcats     * 1.0.0.9000 2023-01-31 [1] Github (tidyverse/forcats@4a8525a)\n formattable * 0.2.1      2021-01-07 [1] CRAN (R 4.2.1)\n fs            1.6.1      2023-02-06 [1] CRAN (R 4.2.2)\n generics      0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n ggplot2     * 3.4.1.9000 2023-03-08 [1] Github (tidyverse/ggplot2@04a5ef2)\n ggrepel       0.9.3      2023-02-03 [1] CRAN (R 4.2.2)\n glue          1.6.2.9000 2023-01-26 [1] Github (tidyverse/glue@794eb37)\n gt            0.8.0.9000 2023-03-06 [1] Github (rstudio/gt@6272bc5)\n gtable        0.3.1.9000 2022-09-26 [1] Github (r-lib/gtable@2e33c5b)\n hms           1.1.2      2022-08-19 [1] CRAN (R 4.2.1)\n htmltools     0.5.4.9000 2023-02-23 [1] Github (rstudio/htmltools@48c46ed)\n htmlwidgets   1.6.1.9000 2023-01-08 [1] Github (ramnathv/htmlwidgets@843eee9)\n httpuv        1.6.9      2023-02-14 [1] CRAN (R 4.2.2)\n jsonlite      1.8.4      2022-12-06 [1] CRAN (R 4.2.2)\n knitr         1.42       2023-01-25 [1] CRAN (R 4.2.2)\n labeling      0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n later         1.3.0      2021-08-18 [1] CRAN (R 4.2.2)\n lattice       0.20-45    2021-09-22 [2] CRAN (R 4.2.2)\n lifecycle     1.0.3.9000 2023-03-08 [1] Github (r-lib/lifecycle@9ac73f5)\n lubridate   * 1.9.2      2023-02-10 [1] CRAN (R 4.2.2)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.2)\n Matrix      * 1.5-3      2022-11-11 [1] CRAN (R 4.2.2)\n memoise       2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n mime          0.12       2021-09-28 [1] CRAN (R 4.2.2)\n miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.2.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n patchwork   * 1.1.2.9000 2022-08-20 [1] Github (thomasp85/patchwork@c14c960)\n pillar        1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n pkgbuild      1.4.0.9000 2023-02-18 [1] Github (r-lib/pkgbuild@9ec92a0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n pkgload       1.3.2      2022-11-16 [1] CRAN (R 4.2.2)\n prettyunits   1.1.1.9000 2022-04-22 [1] Github (r-lib/prettyunits@8706d89)\n processx      3.8.0      2022-10-26 [1] CRAN (R 4.2.1)\n profvis       0.3.7      2020-11-02 [1] CRAN (R 4.2.2)\n promises      1.2.0.1    2021-02-11 [1] CRAN (R 4.2.2)\n ps            1.7.2      2022-10-26 [1] CRAN (R 4.2.1)\n purrr       * 1.0.1.9000 2023-02-08 [1] Github (tidyverse/purrr@fd5a732)\n R.cache       0.16.0     2022-07-21 [1] CRAN (R 4.2.1)\n R.methodsS3   1.8.2      2022-06-13 [1] CRAN (R 4.2.0)\n R.oo          1.25.0     2022-06-12 [1] CRAN (R 4.2.0)\n R.utils       2.12.2     2022-11-11 [1] CRAN (R 4.2.2)\n R6            2.5.1.9000 2022-10-29 [1] Github (r-lib/R6@e6b5eaf)\n ragg          1.2.5.9000 2023-03-08 [1] Github (r-lib/ragg@69ad967)\n Rcpp          1.0.10     2023-01-22 [1] CRAN (R 4.2.2)\n readr       * 2.1.4.9000 2023-03-02 [1] Github (tidyverse/readr@eeb8f6b)\n remotes       2.4.2.9000 2023-02-18 [1] Github (r-lib/remotes@1e12140)\n rlang         1.1.0      2023-03-08 [1] Github (r-lib/rlang@60159c7)\n rmarkdown     2.20.1     2023-02-10 [1] Github (rstudio/rmarkdown@a75dc37)\n Rttf2pt1      1.3.12     2023-01-22 [1] CRAN (R 4.2.2)\n sass          0.4.5      2023-01-24 [1] CRAN (R 4.2.2)\n scales        1.2.1.9000 2022-08-20 [1] Github (r-lib/scales@b3df2fb)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n shiny         1.7.4      2022-12-15 [1] CRAN (R 4.2.2)\n stringi       1.7.12     2023-01-11 [1] CRAN (R 4.2.2)\n stringr     * 1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n styler      * 1.9.1      2023-03-05 [1] Github (r-lib/styler@57bbf4e)\n systemfonts   1.0.4      2022-02-11 [1] CRAN (R 4.2.2)\n textshaping   0.3.6      2021-10-13 [1] CRAN (R 4.2.2)\n tibble      * 3.2.0.9000 2023-03-08 [1] Github (tidyverse/tibble@a310014)\n tidyr       * 1.3.0.9000 2023-01-25 [1] Github (tidyverse/tidyr@0764e65)\n tidyselect    1.2.0.9000 2023-03-08 [1] Github (r-lib/tidyselect@177a190)\n tidyverse   * 2.0.0.9000 2023-03-08 [1] Github (tidyverse/tidyverse@37018d1)\n timechange    0.2.0      2023-01-11 [1] CRAN (R 4.2.2)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.2)\n urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.2.0)\n usethis       2.1.6.9000 2023-03-08 [1] Github (r-lib/usethis@dac38d0)\n utf8          1.2.3      2023-01-31 [1] CRAN (R 4.2.2)\n vctrs         0.5.2.9000 2023-03-08 [1] Github (r-lib/vctrs@469411a)\n viridisLite   0.4.1      2022-08-22 [1] CRAN (R 4.2.1)\n vroom         1.6.1.9000 2023-02-10 [1] Github (r-lib/vroom@a7769d1)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun          0.37       2023-01-31 [1] CRAN (R 4.2.2)\n xtable        1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n yaml          2.3.7      2023-01-23 [1] CRAN (R 4.2.2)\n\n [1] /opt/homebrew/lib/R/4.2/site-library\n [2] /opt/homebrew/Cellar/r/4.2.2_1/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\nStyling  1  files:\n rational_epicardial_reprogramming.qmd ✔ \n────────────────────────────────────────\nStatus  Count   Legend \n✔   1   File unchanged.\nℹ   0   File changed.\n✖   0   Styling threw an error.\n────────────────────────────────────────"
  },
  {
    "objectID": "global_reprogramming_of_transcription.html",
    "href": "global_reprogramming_of_transcription.html",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "",
    "text": "Sys.time()\n\n[1] \"2023-03-08 17:59:16 CST\"\nSys.timezone()\n\n[1] \"America/Chicago\""
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#preparation",
    "href": "global_reprogramming_of_transcription.html#preparation",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "Preparation",
    "text": "Preparation\nFunctions\nLoad required packages.\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(patchwork)\nlibrary(extrafont)\n\n\nsource(file = file.path(SCRIPT_DIR, \"utilities.R\"))\n\n\n`%+replace%` &lt;- ggplot2::`%+replace%`\n\nSymbols\n\nPROJECT_DIR &lt;- file.path(\n    \"/Users/jialei/Dropbox/Data/Projects/UTSW/Cellular_reprogramming\",\n    \"Cardiac_reprogramming/Notebooks\"\n)\n\n\ngene_symbols &lt;- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR, \"data\", \"misc\", \"genes.tsv\"\n    ),\n    col_names = FALSE\n)\n\ngene_symbols &lt;- setNames(object = gene_symbols$X2, nm = gene_symbols$X1)\ngene_symbols |&gt; head()\n\nENSMUSG00000051951 ENSMUSG00000089699 ENSMUSG00000102343 ENSMUSG00000025900 \n            \"Xkr4\"           \"Gm1992\"          \"Gm37381\"              \"Rp1\" \nENSMUSG00000109048 ENSMUSG00000025902 \n             \"Rp1\"            \"Sox17\" \n\n\n\nlength(gene_symbols)\n\n[1] 27999\n\n\nMatrix\n\nmatrix_readcount_use &lt;- Matrix::sparseMatrix(\n    i = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_indices.rds\"\n        )\n    ),\n    p = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_indptr.rds\"\n        )\n    ),\n    x = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_values.rds\"\n        )\n    ),\n    dims = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_shape.rds\"\n        )\n    ),\n    dimnames = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/10x\", \"expr_readcount_raw_csc_dimnames.rds\"\n        )\n    ),\n    index1 = FALSE\n)\n\n\ndim(matrix_readcount_use)\n\n[1] 27999 34564\n\n\n\nrownames(matrix_readcount_use) &lt;- paste(\n    rownames(matrix_readcount_use),\n    gene_symbols[rownames(matrix_readcount_use)],\n    sep = \"_\"\n)\n\nmatrix_readcount_use[1:5, 1:5] |&gt;\n    as.matrix() |&gt;\n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\nBL5_AAACCTGCACTACAGT\nBL5_AAACCTGCAGTACACT\nBL5_AAACCTGGTTCACGGC\nBL5_AAACCTGGTTGCTCCT\nBL5_AAACCTGTCCAACCAA\n\n\n\nENSMUSG00000051951_Xkr4\n0\n0\n0\n0\n0\n\n\nENSMUSG00000089699_Gm1992\n0\n0\n0\n0\n0\n\n\nENSMUSG00000102343_Gm37381\n0\n0\n0\n0\n0\n\n\nENSMUSG00000025900_Rp1\n0\n0\n0\n0\n0\n\n\nENSMUSG00000109048_Rp1\n0\n0\n0\n0\n0\n\n\n\n\n\nCellDataSet\n\nmonocle2_result &lt;- extract_monocle2_result(\n    cell_dataset = readRDS(\n        file = file.path(\n            PROJECT_DIR, \"data/10x/epicardial_3f_d7\",\n            \"cell_dataset_lowerDetectionLimit0.5_DDRTree_dim2_reverse.rds\"\n        )\n    )\n)\n\n\ndim(monocle2_result$data)\n\n[1] 22693    11\n\n\n\nCheck memory usage.\n\npurrr::walk(\n    list(matrix_readcount_use, monocle2_result), \\(x) {\n        print(object.size(x), units = \"auto\", standard = \"SI\")\n    }\n)\n\n1.1 GB\n3.5 MB"
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#trajectory",
    "href": "global_reprogramming_of_transcription.html#trajectory",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "Trajectory",
    "text": "Trajectory\n\nx_column &lt;- \"x_monocle\"\ny_column &lt;- \"y_monocle\"\n\nGEOM_POINT_SIZE &lt;- 0.5\nEMBEDDING_TITLE_PREFIX &lt;- \"Monocle\"\nRASTERISED &lt;- FALSE\n\n\nembedding &lt;- monocle2_result$data |&gt;\n    dplyr::mutate(\n        group = dplyr::case_when(\n            category %in% c(\"BL18\") ~ \"10F, D14\",\n            category %in% c(\"BL19\") ~ \"3F, D7\",\n            category %in% c(\"BL5\", \"BL6\") ~ \"Primary\",\n            category %in% c(\"BL7\") ~ \"Uninfected\",\n            category %in% c(\"BL8\") ~ \"10F, D7\"\n        ),\n        group = factor(\n            group,\n            levels = c(\n                \"Primary\", \"Uninfected\",\n                \"10F, D7\", \"10F, D14\", \"3F, D7\"\n            )\n        )\n    ) |&gt;\n    dplyr::rename(cell = sample_name)\n\n\np_embedding_pseudotime &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$pseudotime,\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Pseudotime\"),\n    color_legend = TRUE,\n    sort_values = TRUE\n) +\n    theme_customized_embedding()\n\ncolor_labels &lt;- embedding |&gt;\n    dplyr::group_by(state) |&gt;\n    dplyr::summarise(\n        x = median(x_monocle),\n        y = median(y_monocle)\n    ) |&gt;\n    as.data.frame()\n\ngeom_segment_layer &lt;- ggplot2::geom_segment(\n    ggplot2::aes_string(\n        x = \"source_prin_graph_dim_1\",\n        y = \"source_prin_graph_dim_2\",\n        xend = \"target_prin_graph_dim_1\",\n        yend = \"target_prin_graph_dim_2\"\n    ),\n    data = monocle2_result$edge,\n    na.rm = TRUE,\n    color = \"#2196F3\",\n    linetype = \"solid\",\n    linewidth = .25\n)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\nlayers &lt;- list(\n    ggplot2::geom_point(\n        data = color_labels,\n        aes(x, y),\n        size = 2.0,\n        stroke = 0,\n        shape = 22,\n        fill = \"#E29C36\",\n        color = \"#E29C36\"\n    ),\n    ggplot2::annotate(\n        geom = \"text\",\n        x = color_labels$x,\n        y = color_labels$y,\n        label = LETTERS[as.integer(color_labels$state)],\n        size = 1.5,\n        family = \"Arial\",\n        color = \"black\"\n    )\n)\n\np_embedding_pseudotime &lt;- p_embedding_pseudotime +\n    geom_segment_layer +\n    layers\n\n\np_embedding_UMI &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = log10(Matrix::colSums(matrix_readcount_use[, embedding$cell])),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE\n) + theme_customized_embedding() +\n    geom_segment_layer\n\n\np_embedding_backbone &lt;- ggplot2::ggplot() +\n    ggplot2::facet_wrap(NA) +\n    geom_segment_layer +\n    theme_customized_embedding() +\n    scale_x_continuous(\n        limits = extract_ggplot_axis_ranges(p_embedding_pseudotime)[[1]]\n    ) +\n    scale_y_continuous(\n        limits = extract_ggplot_axis_ranges(p_embedding_pseudotime)[[2]]\n    ) +\n    layers\n\n\np_embedding_MT &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = (colSums(matrix_readcount_use[\n        stringr::str_detect(\n            string = stringr::str_remove(\n                string = rownames(matrix_readcount_use),\n                pattern = \"^E.+_\"\n            ),\n            pattern = \"mt-\"\n        ),\n    ]) / colSums(matrix_readcount_use))[embedding$cell],\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; MT %\"),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    shuffle_values = FALSE\n) + theme_customized_embedding() +\n    geom_segment_layer\n\n\nlist(\n    p_embedding_backbone,\n    p_embedding_pseudotime,\n    p_embedding_UMI,\n    p_embedding_MT\n) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = TRUE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nCellular state\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = Matrix::colSums(matrix_readcount_use[, cell]),\n        num_features = Matrix::colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(state) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    dplyr::mutate(\n        state = LETTERS[as.integer(state)]\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(state),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(\"num_cells\"),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**Monocle**; Cellular state\")\n    )\n\n\n\n\n\n\n\n\nMonocle; Cellular state\n    \n\n\n      state\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\nA\n8,106\n14,130.0\n3,644.5\n\n\n\nB\n206\n8,527.0\n2,717.5\n\n\n\nC\n538\n12,166.5\n3,373.0\n\n\n\nD\n181\n10,272.0\n2,977.0\n\n\n\nE\n2,380\n12,835.5\n3,579.5\n\n\n\nF\n965\n7,742.0\n2,573.0\n\n\n\nG\n1,577\n5,636.0\n2,067.0\n\n\n\nH\n4,064\n10,072.0\n3,018.5\n\n\n\nI\n4,676\n4,981.5\n1,572.0\n\n\nCount\n9\n—\n—\n—\n\n\nMean\n—\n—\n9,595.8\n2,835.8\n\n\nSum\n—\n22,693\n—\n—\n\n\n\n\n\n\n\npurrr::map(levels(embedding$state), \\(x) {\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = as.integer(embedding$state == x) |&gt; as.factor(),\n        label = glue::glue(\n            \"{EMBEDDING_TITLE_PREFIX}; Pseudotime; \",\n            \"State {LETTERS[as.integer(x)]}\"\n        ),\n        color_legend = FALSE,\n        sort_values = TRUE\n    ) +\n        theme_customized_embedding() +\n        ggplot2::scale_color_manual(values = c(\"grey70\", \"salmon\")) +\n        geom_segment_layer\n}) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3, byrow = TRUE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nGroup\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = Matrix::colSums(matrix_readcount_use[, cell]),\n        num_features = Matrix::colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(group) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    dplyr::select(\n        group, dplyr::everything()\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::data_color(\n        columns = c(group),\n        fn = scales::col_factor(\n            palette = paletteer::paletteer_d(\n                n = 5, palette = \"colorblindr::OkabeIto\"\n            ) |&gt; as.character(),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**Monocle**; Group\")\n    ) |&gt;\n    gt::tab_options(\n        table.width = gt::pct(50)\n    )\n\n\n\n\n\n\n\n\nMonocle; Group\n    \n\n\n      group\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\nPrimary\n64\n6,244.5\n2,619.5\n\n\n\nUninfected\n4,914\n13,713.0\n3,571.0\n\n\n\n10F, D7\n5,291\n10,534.0\n3,043.0\n\n\n\n10F, D14\n5,639\n9,724.0\n2,881.0\n\n\n\n3F, D7\n6,785\n8,805.0\n2,812.0\n\n\nCount\n—\n5\n—\n—\n\n\nMean\n—\n—\n9,804.1\n2,985.3\n\n\nSum\n—\n22,693\n—\n—\n\n\n\n\n\n\n\nlist(\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = embedding$group,\n        label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Pseudotime; Batch\"),\n        color_legend = TRUE,\n        sort_values = FALSE,\n        shuffle_values = TRUE\n    ) +\n        theme_customized_embedding() +\n        geom_segment_layer,\n    purrr::map(levels(embedding$group), \\(x) {\n        plot_embedding(\n            data = embedding[, c(x_column, y_column)],\n            color = as.integer(embedding$group == x) |&gt; as.factor(),\n            label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Pseudotime; {x}\"),\n            color_legend = FALSE,\n            sort_values = TRUE\n        ) +\n            theme_customized_embedding() +\n            ggplot2::scale_color_manual(values = c(\"grey70\", \"salmon\")) +\n            geom_segment_layer\n    })\n) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = TRUE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nComposition\n\ncolor_palette &lt;- setNames(\n    object = c(\"#e37b3e\", \"#44b29c\", \"#de5a49\", \"#f7a8a5\", \"#f0ca4e\"),\n    nm = c(\"Primary\", \"3F, D7\", \"10F, D14\", \"10F, D7\", \"Uninfected\")\n)\n\nscales::show_col(color_palette, borders = NA)\n\n\n\n\n\n\n\n\ncalc_group_composition(\n    data = embedding,\n    x = \"state\",\n    group = \"group\"\n) |&gt;\n    dplyr::mutate(\n        state = factor(\n            LETTERS[as.integer(state)]\n        )\n    ) |&gt;\n    plot_barplot(\n        x = \"state\",\n        y = \"percentage\",\n        z = \"group\",\n        legend_ncol = 1\n    ) +\n    ggplot2::scale_fill_manual(\n        values = color_palette\n    )\n\n\n\n\n\n\n\n\ncalc_group_composition(\n    data = embedding,\n    x = \"state\",\n    group = \"group\"\n) |&gt;\n    dplyr::mutate(\n        group = factor(\n            group,\n            levels = c(\"Primary\", \"3F, D7\", \"10F, D14\", \"10F, D7\", \"Uninfected\")\n        )\n    ) |&gt;\n    split(~state) |&gt;\n    purrr::map(\n        \\(x) {\n            x |&gt;\n                dplyr::mutate(\n                    label_position = cumsum(percentage) - percentage / 2\n                )\n        }\n    ) |&gt;\n    dplyr::bind_rows() |&gt;\n    {\n        \\(x) {\n            ggplot2::ggplot(\n                data = x,\n                aes(\n                    x = \"\",\n                    y = percentage,\n                    fill = group\n                )\n            ) +\n                geom_bar(width = 1, stat = \"identity\") +\n                coord_polar(\"y\", start = 0) +\n                facet_wrap(\n                    ~state,\n                    labeller = labeller(\n                        state = setNames(\n                            object = paste(\n                                \"State\",\n                                LETTERS[as.integer(levels(embedding$state))]\n                            ),\n                            nm = levels(embedding$state)\n                        )\n                    )\n                ) +\n                ggplot2::geom_text(\n                    data = x,\n                    ggplot2::aes(\n                        y = label_position,\n                        label = scales::percent(percentage, accuracy = 0.01)\n                    ), size = 5 / ggplot2::.pt\n                ) +\n                ggplot2::scale_x_discrete(name = NULL) +\n                ggplot2::scale_y_continuous(name = NULL) +\n                ggplot2::scale_fill_manual(\n                    name = NULL,\n                    values = color_palette\n                ) +\n                theme_customized_violin() %+replace%\n                ggplot2::theme(\n                    axis.text.x = ggplot2::element_blank(),\n                    axis.ticks = ggplot2::element_blank(),\n                    legend.text = ggplot2::element_text(\n                        size = 6,\n                        margin = ggplot2::margin(\n                            t = 0, r = 0,\n                            b = 0, l = -1,\n                            unit = \"mm\"\n                        )\n                    ),\n                    legend.key.size = ggplot2::unit(4, \"mm\")\n                )\n        }\n    }()"
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#expression",
    "href": "global_reprogramming_of_transcription.html#expression",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "Expression",
    "text": "Expression\n\nFEATURES_SELECTED &lt;- c(\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\",\n    \"ENSMUSG00000036098_Myrf\",\n    \"ENSMUSG00000042985_Upk3b\"\n)\n\npurrr::map(FEATURES_SELECTED, \\(x) {\n    selected_feature &lt;- x\n\n    cat(selected_feature, \"\\n\")\n    values &lt;- log10(\n        calc_cpm(matrix_readcount_use[, embedding$cell])\n        [selected_feature, ] + 1\n    )\n    values[embedding$group != \"3F, D7\"] &lt;- NA\n\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = values,\n        label = glue::glue(\n            \"{EMBEDDING_TITLE_PREFIX}; 3F, D7; \",\n            \"{x |&gt; stringr::str_remove(pattern = \\\"^E.+_\\\")}\"\n        ),\n        color_legend = TRUE,\n        sort_values = TRUE,\n        na_value = \"grey70\"\n    ) +\n        theme_customized_embedding() +\n        geom_segment_layer\n}) |&gt;\n    # unlist(recursive = FALSE) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\nENSMUSG00000016458_Wt1 \nENSMUSG00000025105_Bnc1 \nENSMUSG00000036098_Myrf \nENSMUSG00000042985_Upk3b"
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#enrichment-of-exogenous-factors",
    "href": "global_reprogramming_of_transcription.html#enrichment-of-exogenous-factors",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "Enrichment of exogenous factors",
    "text": "Enrichment of exogenous factors\n\nfeatures_selected_10 &lt;- c(\n    \"ENSMUSG00000026628_Atf3\",\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\",\n    \"ENSMUSG00000051910_Sox6\",\n    \"ENSMUSG00000045680_Tcf21\",\n    \"ENSMUSG00000038193_Hand2\",\n    \"ENSMUSG00000031965_Tbx20\",\n    \"ENSMUSG00000032419_Tbx18\",\n    \"ENSMUSG00000005836_Gata6\",\n    \"ENSMUSG00000036098_Myrf\"\n)\n\n\nstates_selected &lt;- levels(embedding$state)\n\nenriched_factors &lt;- do.call(\n    rbind.data.frame,\n    lapply(states_selected, \\(x) {\n        cells_1 &lt;- embedding$cell[\n            embedding$state == x & embedding$category == \"BL19\"\n        ]\n        cells_2 &lt;- embedding$cell[embedding$category == \"BL7\"]\n\n        cat(x, length(cells_1), length(cells_2), \"\\n\")\n\n        de_paired &lt;- detect_de(\n            cell_group_a = cells_1,\n            cell_group_b = cells_2,\n            matrix_readcount = matrix_readcount_use,\n            matrix_cpm = calc_cpm(matrix_readcount_use),\n            only_enrichment = TRUE\n        ) |&gt;\n            dplyr::mutate(category = x) |&gt;\n            tibble::rownames_to_column(var = \"feature\") |&gt;\n            dplyr::filter(feature %in% features_selected_10)\n    })\n) |&gt;\n    dplyr::filter(category %in% states_selected) |&gt;\n    dplyr::mutate(\n        category = factor(category,\n            levels = states_selected\n        ),\n        symbol = stringr::str_remove(\n            string = feature,\n            pattern = \"^.+_\"\n        )\n    )\n\n1 758 4914 \n2 68 4914 \n3 150 4914 \n4 89 4914 \n5 1092 4914 \n6 585 4914 \n7 998 4914 \n8 2130 4914 \n9 915 4914 \n\n\n\nenriched_factors &lt;- enriched_factors |&gt;\n    dplyr::mutate(\n        pval_adj_log = ifelse(-log10(pval_adj) == Inf, 400, -log10(pval_adj))\n    )\n\nggplot2::ggplot() +\n    ggplot2::geom_abline(intercept = 0, slope = 1, linetype = 2) +\n    ggplot2::geom_point(\n        data = enriched_factors,\n        ggplot2::aes(positive_frac_b,\n            positive_frac_a,\n            size = pval_adj_log, # -log10(pval_adj),\n            color = log2_effect\n        ),\n        alpha = .8,\n        stroke = 0, shape = 16\n    ) +\n    ggplot2::facet_wrap(\n        ~category,\n        ncol = 3,\n        labeller = ggplot2::labeller(\n            category = setNames(\n                object = paste(\"State\", LETTERS[as.integer(states_selected)]),\n                nm = states_selected\n            )\n        )\n    ) +\n    ggplot2::coord_fixed() +\n    ggplot2::scale_color_viridis_c(\n        name = expression(paste(\"Log\"[2], \" effect\"))\n    ) +\n    ggplot2::scale_size_continuous(\n        name = expression(paste(\"-log\"[10], \" (p-value)\"))\n    ) +\n    ggplot2::guides(\n        color = ggplot2::guide_colorbar(order = 1),\n        size = ggplot2::guide_legend(order = 2)\n    ) +\n    ggplot2::scale_x_continuous(\n        name = \"Expr (%, other reprogrammed cells)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Expr (%, indicated cluster)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    theme_customized_violin() %+replace%\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        legend.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n        legend.key.size = ggplot2::unit(2.5, \"mm\"),\n        legend.text = ggplot2::element_text(family = \"Arial\", size = 6),\n        legend.title = ggplot2::element_text(family = \"Arial\", size = 7),\n        legend.position = \"bottom\",\n        legend.box = \"horizontal\",\n        legend.box.background = ggplot2::element_blank()\n    ) +\n    ggrepel::geom_text_repel(\n        data = enriched_factors,\n        ggplot2::aes(\n            positive_frac_b,\n            positive_frac_a,\n            label = symbol\n        ),\n        #\n        size = 5 / ggplot2::.pt,\n        family = \"Arial\",\n        box.padding = .2,\n        point.padding = .2,\n        nudge_y = .15,\n        arrow = ggplot2::arrow(length = ggplot2::unit(.02, \"npc\")),\n        segment.color = \"grey35\",\n        color = \"black\"\n    )"
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#exploring-gene-regulatory-network",
    "href": "global_reprogramming_of_transcription.html#exploring-gene-regulatory-network",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "Exploring gene regulatory network",
    "text": "Exploring gene regulatory network\n\nmake_groups &lt;- function(x, number_of_members) {\n    y &lt;- seq_along(x)\n    chunks &lt;- split(x, ceiling(y / number_of_members))\n\n    if (length(chunks[[length(chunks)]]) &lt; number_of_members) {\n        chunks[[length(chunks) - 1]] &lt;- c(\n            chunks[[length(chunks) - 1]], chunks[[length(chunks)]]\n        )\n\n        chunks[[length(chunks)]] &lt;- NULL\n    }\n    return(chunks)\n}\n\n\nmonocle_states_selected &lt;- c(\n    1, 2, 4, 6, 8\n)\n\ncells_selected_reprogrammed &lt;- embedding |&gt;\n    dplyr::filter(\n        state %in% monocle_states_selected,\n        !category %in% c(\n            \"BL5\",\n            \"BL6\",\n            \"BL7\"\n        )\n    ) |&gt;\n    dplyr::arrange(pseudotime) |&gt;\n    dplyr::pull(cell)\n\ncells_selected_reference &lt;- embedding |&gt;\n    dplyr::filter(\n        state %in% monocle_states_selected,\n        category %in% c(\"BL5\", \"BL6\")\n    ) |&gt;\n    dplyr::arrange(pseudotime) |&gt;\n    dplyr::pull(cell)\n\nMap(length, list(cells_selected_reprogrammed, cells_selected_reference)) |&gt;\n    unlist()\n\n[1] 9727   64\n\n\n\nfeatures_selected_heatmap &lt;- readRDS(\n    file = file.path(\n        PROJECT_DIR,\n        \"data/10x/epicardial_3f_d7/de_paired_primary_epicardial_uninfected.rds\"\n    )\n) |&gt; rownames()\n\n\nNUM_CELLS_TO_MERGE &lt;- 20\n\nmatrix_heatmap_reprogrammed &lt;- purrr::map(\n    make_groups(cells_selected_reprogrammed, NUM_CELLS_TO_MERGE), \\(x) {\n        Matrix::rowSums(matrix_readcount_use[, x])\n    }\n) |&gt;\n    purrr::reduce(cbind) |&gt;\n    calc_cpm()\n\ncolnames(matrix_heatmap_reprogrammed) &lt;- paste(\n    \"metacell_reprogrammed\",\n    1:ncol(matrix_heatmap_reprogrammed),\n    sep = \"_\"\n)\n\n\nmatrix_heatmap_reference &lt;- purrr::map(\n    make_groups(cells_selected_reference, NUM_CELLS_TO_MERGE), \\(x) {\n        Matrix::rowSums(matrix_readcount_use[, x])\n    }\n) |&gt;\n    purrr::reduce(cbind) |&gt;\n    calc_cpm()\n\nmatrix_heatmap_reference &lt;- purrr::map(\n    make_groups(cells_selected_reference, NUM_CELLS_TO_MERGE), \\(x) {\n        Matrix::rowMeans(calc_cpm(matrix_readcount_use[, x]))\n    }\n) |&gt;\n    purrr::reduce(cbind)\n\ncolnames(matrix_heatmap_reference) &lt;- paste(\n    \"metacell_reference\",\n    1:ncol(matrix_heatmap_reference),\n    sep = \"_\"\n)\n\nExpression signature\n\nmatrix_kmeans &lt;- log10(\n    matrix_heatmap_reprogrammed[features_selected_heatmap, ] + 1\n)\n\npos_frac &lt;- .2\nfeatures_selected_heatmap &lt;- features_selected_heatmap[\n    rowMeans(matrix_kmeans &gt; 0) &gt;= pos_frac\n]\nmatrix_kmeans &lt;- matrix_kmeans[features_selected_heatmap, ]\nmatrix_kmeans &lt;- t(scale(t(matrix_kmeans)))\n\nkmeans_limits &lt;- quantile(matrix_kmeans, c(0.05, 0.95))\nmatrix_kmeans[matrix_kmeans &lt; kmeans_limits[1]] &lt;- kmeans_limits[1]\nmatrix_kmeans[matrix_kmeans &gt; kmeans_limits[2]] &lt;- kmeans_limits[2]\n\nNUM_CENTERS &lt;- 6\nSEED &lt;- 20180706\nset.seed(SEED)\nkmeans_out &lt;- kmeans(\n    matrix_kmeans,\n    NUM_CENTERS,\n    iter.max = 10,\n    nstart = 20\n)\n\n\n# customize numbers of features per group\nnum_features_per_group &lt;- kmeans_out$cluster |&gt;\n    table() |&gt;\n    tibble::enframe() |&gt;\n    dplyr::rename(cluster = name, count = value) |&gt;\n    mutate(\n        x = quantile(seq_len(dim(kmeans_out$centers)[2]), .5),\n        # y = 1,\n        y = 0.7,\n        label = paste(\"n =\", count)\n    ) |&gt;\n    dplyr::mutate(\n        group = dplyr::case_when(\n            cluster == 6 ~ \"Signature 1\",\n            cluster == 1 ~ \"Signature 2\",\n            cluster == 3 ~ \"Signature 3\",\n            cluster == 5 ~ \"Signature 4\",\n            cluster == 2 ~ \"Signature 5\",\n            cluster == 4 ~ \"Signature 6\"\n        ),\n        group = factor(group)\n    )\n\n# customize x axis limits\nx_breaks &lt;- quantile(seq_len(dim(kmeans_out$centers)[2]), probs = seq(0, 1, 1))\n\n# draw\np_kmeans &lt;- kmeans_out$centers |&gt;\n    t() |&gt;\n    as.data.frame() |&gt;\n    tibble::rownames_to_column(var = \"metacell\") |&gt;\n    dplyr::mutate(x = 1:n()) |&gt;\n    tidyr::pivot_longer(\n        -c(\"metacell\", \"x\"),\n        names_to = \"cluster\",\n        values_to = \"value\"\n    ) |&gt;\n    dplyr::mutate(\n        group = dplyr::case_when(\n            cluster == 6 ~ \"Signature 1\",\n            cluster == 1 ~ \"Signature 2\",\n            cluster == 3 ~ \"Signature 3\",\n            cluster == 5 ~ \"Signature 4\",\n            cluster == 2 ~ \"Signature 5\",\n            cluster == 4 ~ \"Signature 6\"\n        ),\n        group = factor(group)\n    ) |&gt;\n    ggplot2::ggplot(ggplot2::aes(x, value)) +\n    ggplot2::geom_line(size = .2) +\n    ggplot2::facet_wrap(\n        ~group,\n        # scales = \"free_y\",\n        ncol = 3,\n        # strip.position = \"left\",\n        strip.position = \"top\",\n        # labeller = labeller(cluster = facet_labels)\n    ) +\n    ggplot2::scale_x_continuous(\n        name = glue::glue(\n            \"Scaled pseudotime (state \",\n            paste(LETTERS[as.integer(monocle_states_selected)],\n                collapse = \"\"\n            ),\n            \")\"\n        ),\n        breaks = x_breaks\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Scaled expr (Z score)\",\n        limits = c(-1.5, 1.5)\n    ) +\n    ggplot2::geom_text(\n        data = num_features_per_group,\n        ggplot2::aes(x, y, label = label),\n        family = \"Arial\",\n        vjust = -.5,\n        size = 2\n    ) +\n    ggplot2::labs(title = \"Reprogrammed cells\") +\n    theme_customized_violin(\n        panel_border_color = \"black\",\n        strip_background_fill = \"grey80\"\n    ) %+replace%\n    ggplot2::theme(\n        axis.text.x = ggplot2::element_text(\n            family = \"Arial\",\n            angle = 90,\n            vjust = .5,\n            hjust = 1,\n            size = 6\n        ),\n        plot.title = ggplot2::element_text(\n            family = \"Arial\",\n            size = 6,\n            # margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"))\n            hjust = .5\n        )\n    )\n\n\ng &lt;- ggplot2::ggplot_gtable(ggplot2::ggplot_build(p_kmeans))\nstript &lt;- which(grepl(\"strip-t\", g$layout$name))\n\ncolors_strip_background_fill &lt;- ggthemes::tableau_color_pal(\n    \"Tableau 10\"\n)(n = NUM_CENTERS)\ncolors_strip_background_fill &lt;- c(\n    colors_strip_background_fill[4:6],\n    colors_strip_background_fill[1:3]\n)\n\nk &lt;- 1\nfor (i in stript) {\n    j &lt;- which(grepl(\"rect\", g$grobs[[i]]$grobs[[1]]$childrenOrder))\n    g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill &lt;-\n        colors_strip_background_fill[k]\n    k &lt;- k + 1\n}\ngrid::grid.draw(g)\n\n\n\n\n\n\n\nHeatmap\n\nfeature_clusters &lt;- c(6, 1, 3, 5, 2, 4)\nfeatures_selected_heatmap &lt;- purrr::map(feature_clusters, \\(x) {\n    names(kmeans_out$cluster)[kmeans_out$cluster == x]\n}) |&gt;\n    unlist()\nfeatures_selected_heatmap &lt;- paste(\n    features_selected_heatmap, gene_symbols[features_selected_heatmap],\n    sep = \"_\"\n)\n\n# begin\nmatrix_heatmap &lt;- cbind(\n    matrix_heatmap_reprogrammed,\n    matrix_heatmap_reference\n)\nmatrix_heatmap &lt;- matrix_heatmap[features_selected_heatmap, ]\nmatrix_heatmap &lt;- matrix_heatmap[rowSums(matrix_heatmap) != 0, ]\n\nmatrix_heatmap &lt;- log10(matrix_heatmap + 1)\nmatrix_heatmap &lt;- t(scale(t(matrix_heatmap)))\n\nheatmap_limits &lt;- quantile(matrix_heatmap, c(0.05, 0.95))\nmatrix_heatmap[matrix_heatmap &lt; heatmap_limits[1]] &lt;- heatmap_limits[1]\nmatrix_heatmap[matrix_heatmap &gt; heatmap_limits[2]] &lt;- heatmap_limits[2]\n\n\n# get metacell states\nmetacell_annotation_reprogrammed &lt;- purrr::map_int(\n    make_groups(cells_selected_reprogrammed, NUM_CELLS_TO_MERGE), \\(x) {\n        x |&gt;\n            as.data.frame() |&gt;\n            `colnames&lt;-`(\"cell\") |&gt;\n            dplyr::left_join(\n                embedding |&gt;\n                    dplyr::select(cell, state),\n                by = \"cell\"\n            ) |&gt;\n            dplyr::count(state) |&gt;\n            dplyr::slice(1) |&gt;\n            dplyr::pull(state)\n    }\n)\n\n# create labels for metacells\nanno_labels_tbl_state_reprogrammed &lt;- table(metacell_annotation_reprogrammed) |&gt;\n    tibble::enframe(name = \"group\") |&gt;\n    dplyr::mutate(\n        cum_sum = cumsum(value),\n        position = cum_sum - value / 2\n    )\nanno_labels_state_reprogrammed &lt;- rep(NA, ncol(matrix_heatmap_reprogrammed))\n\nfor (i in seq_len(nrow(anno_labels_tbl_state_reprogrammed))) {\n    anno_labels_state_reprogrammed[\n        anno_labels_tbl_state_reprogrammed[i, \"position\", drop = TRUE] #  - 5\n    ] &lt;- LETTERS[\n        as.integer(anno_labels_tbl_state_reprogrammed[i, \"group\", drop = TRUE])\n    ]\n}\n\n\n# create heatmap column annotation\nha_column_reprogrammed &lt;- ComplexHeatmap::HeatmapAnnotation(\n    #\n    state = ComplexHeatmap::anno_simple(\n        metacell_annotation_reprogrammed,\n        pch = anno_labels_state_reprogrammed,\n        col = setNames(\n            object = scales::hue_pal()(\n                n = length(unique(monocle2_result[[1]]$state))\n            ),\n            nm = sort(unique(monocle2_result[[1]]$state))\n        ),\n        which = \"column\",\n        pt_size = unit(5 / ggplot2::.pt, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(1.5, \"mm\")\n    ),\n    #\n    show_annotation_name = TRUE,\n    annotation_label = c(\n        \"State\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 5),\n    annotation_name_side = \"left\"\n)\n\n\n# create heatmap row annotation; left\nha_left &lt;- ComplexHeatmap::HeatmapAnnotation(\n    lineage = ComplexHeatmap::anno_simple(\n        setNames(\n            object = rep(\n                seq_len(NUM_CENTERS),\n                purrr::map_int(feature_clusters, \\(x) {\n                    sum(kmeans_out$cluster == x)\n                })\n            ),\n            nm = features_selected_heatmap\n        ),\n        col = setNames(\n            object = ggthemes::tableau_color_pal(\"Tableau 10\")(n = NUM_CENTERS),\n            nm = seq_len(NUM_CENTERS)\n        ),\n        which = \"row\",\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(1.5, \"mm\")\n    ),\n    which = \"row\",\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"Cluster\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 5)\n)\n\n\n# map color\ncol_fun &lt;- circlize::colorRamp2(\n    quantile(\n        c(\n            min(matrix_heatmap),\n            max(matrix_heatmap)\n        ),\n        seq(0, 1, 0.1)\n    ),\n    # viridis::plasma(11)\n    wesanderson::wes_palette(\"Zissou1\", 11, type = \"continuous\")\n)\n\nRASTERISED &lt;- FALSE\n\n# create heatmap\nht_reprogrammed &lt;- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap[, colnames(matrix_heatmap_reprogrammed)] |&gt;\n        as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = col_fun,\n    #\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    row_title_rot = 0,\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    #\n    top_annotation = ha_column_reprogrammed,\n    bottom_annotation = NULL,\n    left_annotation = ha_left,\n    right_annotation = NULL,\n    #\n    column_split = factor(\n        rep(\"Reprogrammed\", length(metacell_annotation_reprogrammed))\n    ),\n    column_gap = unit(0, \"mm\"),\n    #\n    show_heatmap_legend = FALSE,\n    heatmap_legend_param = list(\n        title = \"Expr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED\n)\n\n\nmetacell_annotation_reference &lt;- rep(\n    x = \"Target\",\n    times = ncol(matrix_heatmap_reference)\n)\n\nha_column_reference &lt;- ComplexHeatmap::HeatmapAnnotation(\n    #\n    state = ComplexHeatmap::anno_simple(\n        metacell_annotation_reference,\n        # pch = anno_labels_state_reprogrammed,\n        col = setNames(\n            object = \"#ed7899\",\n            nm = \"Target\"\n        ),\n        which = \"column\",\n        pt_size = unit(2, \"mm\"),\n        pt_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        simple_anno_size = unit(1.5, \"mm\")\n    ),\n    #\n    show_annotation_name = FALSE,\n    annotation_label = c(\n        \"State\"\n    ),\n    annotation_name_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 5),\n    annotation_name_side = \"left\"\n)\n\n\nfeatures_selected_to_mark_right &lt;- c(\n    features_selected_10,\n    \"ENSMUSG00000015627_Gata5\",\n    \"ENSMUSG00000031517_Gpm6a\"\n)\n\nfeatures_selected_to_mark_right &lt;- features_selected_to_mark_right[\n    features_selected_to_mark_right %in% rownames(matrix_heatmap)\n]\n\nfeatures_selected_to_mark_right_idx &lt;- which(\n    rownames(matrix_heatmap) %in% features_selected_to_mark_right\n)\nfeatures_selected_to_mark_right_labels &lt;- rownames(matrix_heatmap)[\n    features_selected_to_mark_right_idx\n] |&gt;\n    stringr::str_remove(\n        pattern = \"^E.+_\"\n    )\n\nha_right &lt;- ComplexHeatmap::rowAnnotation(\n    foo = ComplexHeatmap::anno_mark(\n        at = features_selected_to_mark_right_idx,\n        labels = features_selected_to_mark_right_labels,\n        which = \"row\",\n        side = \"right\",\n        lines_gp = grid::gpar(col = \"grey50\"),\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        )\n    )\n)\n\n\nht_reference &lt;- ComplexHeatmap::Heatmap(\n    matrix = matrix_heatmap[, colnames(matrix_heatmap_reference)] |&gt; as.matrix(),\n    rect_gp = grid::gpar(col = NA, lwd = 0),\n    col = col_fun,\n    #\n    row_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    row_title_rot = 0,\n    column_title_gp = grid::gpar(fontfamily = \"Arial\", fontsize = 6),\n    column_title_rot = 0,\n    #\n    cluster_rows = FALSE,\n    show_row_dend = FALSE,\n    cluster_columns = FALSE,\n    show_column_dend = FALSE,\n    #\n    show_row_names = FALSE,\n    show_column_names = FALSE,\n    #\n    top_annotation = ha_column_reference,\n    bottom_annotation = NULL,\n    right_annotation = ha_right,\n    #\n    column_split = factor(\n        rep(\"Epicardial\", length(metacell_annotation_reference))\n    ),\n    column_gap = unit(0, \"mm\"),\n    #\n    show_heatmap_legend = FALSE,\n    heatmap_legend_param = list(\n        title = \"Expr\",\n        title_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 6\n        ),\n        legend_direction = \"vertical\",\n        labels_gp = grid::gpar(\n            fontfamily = \"Arial\",\n            fontsize = 5\n        ),\n        legend_height = unit(15, \"mm\"),\n        legend_width = unit(5, \"mm\")\n    ),\n    #\n    use_raster = RASTERISED\n)\n\n\n# legend\nlgd_colorbar &lt;- ComplexHeatmap::Legend(\n    col_fun = col_fun,\n    title = \"Expr\",\n    #\n    grid_height = unit(1, \"mm\"),\n    grid_width = unit(2, \"mm\"),\n    legend_height = unit(5, \"mm\"),\n    legend_width = unit(2, \"mm\"),\n    #\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    ),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    )\n)\n\nlgd_signature &lt;- ComplexHeatmap::Legend(\n    title = \"Signature\",\n    labels = seq_len(NUM_CENTERS),\n    legend_gp = grid::gpar(\n        fill = setNames(\n            object = ggthemes::tableau_color_pal(\"Tableau 10\")(n = NUM_CENTERS),\n            nm = seq_len(NUM_CENTERS)\n        )\n    ),\n    #\n    grid_height = unit(1, \"mm\"),\n    grid_width = unit(2.5, \"mm\"),\n    #\n    legend_height = unit(5, \"mm\"),\n    legend_width = unit(2, \"mm\"),\n    #\n    labels_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 5\n    ),\n    title_gp = grid::gpar(\n        fontfamily = \"Arial\",\n        fontsize = 6\n    )\n)\n\npd &lt;- ComplexHeatmap::packLegend(\n    lgd_colorbar,\n    lgd_signature,\n    direction = \"vertical\"\n)\n\n\nComplexHeatmap::draw(\n    ht_reprogrammed + ht_reference,\n    heatmap_legend_list = list(pd),\n    #\n    gap = unit(c(1), \"mm\")\n)\n\n\n\nHeatmap of the six gene-expression signatures. Columns indicate cells ordered by pseudotime (with primary epicardial cells at the far right); rows indicate genes. For visualization purposes, groups of 20 cells are binned."
  },
  {
    "objectID": "global_reprogramming_of_transcription.html#r-session-info",
    "href": "global_reprogramming_of_transcription.html#r-session-info",
    "title": "Global Reprogramming of Transcription by Reprogram-Seq",
    "section": "R session info",
    "text": "R session info\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Ventura 13.2.1\n system   aarch64, darwin22.1.0\n ui       unknown\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-03-08\n pandoc   2.19.2 @ /Users/jialei/.pyenv/shims/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package        * version    date (UTC) lib source\n Biobase          2.56.0     2022-04-26 [1] Bioconductor\n BiocGenerics     0.42.0     2022-04-26 [1] Bioconductor\n bit              4.0.5      2022-11-15 [1] CRAN (R 4.2.2)\n bit64            4.0.5      2020-08-30 [1] CRAN (R 4.2.2)\n cachem           1.0.7      2023-02-24 [1] CRAN (R 4.2.2)\n Cairo            1.6-0      2022-07-05 [1] CRAN (R 4.2.1)\n callr            3.7.3      2022-11-02 [1] CRAN (R 4.2.2)\n circlize         0.4.15     2022-05-10 [1] CRAN (R 4.2.0)\n cli              3.6.0      2023-01-09 [1] CRAN (R 4.2.2)\n clue             0.3-64     2023-01-31 [1] CRAN (R 4.2.2)\n cluster          2.1.4      2022-08-22 [2] CRAN (R 4.2.2)\n codetools        0.2-19     2023-02-01 [2] CRAN (R 4.2.2)\n colorspace       2.1-0      2023-01-23 [1] CRAN (R 4.2.2)\n combinat         0.0-8      2012-10-29 [1] CRAN (R 4.2.0)\n commonmark       1.8.1      2022-10-14 [1] CRAN (R 4.2.1)\n ComplexHeatmap   2.12.1     2022-08-09 [1] Bioconductor\n crayon           1.5.2      2022-09-29 [1] CRAN (R 4.2.1)\n DDRTree          0.1.5      2017-04-30 [1] CRAN (R 4.2.0)\n devtools         2.4.5.9000 2023-03-08 [1] Github (r-lib/devtools@cfa1ba9)\n digest           0.6.31     2022-12-11 [1] CRAN (R 4.2.2)\n docopt           0.7.1      2020-06-24 [1] CRAN (R 4.2.0)\n doParallel       1.0.17     2022-02-07 [1] CRAN (R 4.2.0)\n dplyr          * 1.1.0.9000 2023-03-08 [1] Github (tidyverse/dplyr@e12fd49)\n ellipsis         0.3.2      2021-04-29 [1] CRAN (R 4.2.2)\n evaluate         0.20       2023-01-17 [1] CRAN (R 4.2.2)\n extrafont      * 0.19       2023-01-18 [1] CRAN (R 4.2.2)\n extrafontdb      1.0        2012-06-11 [1] CRAN (R 4.2.0)\n fansi            1.0.4      2023-01-22 [1] CRAN (R 4.2.2)\n farver           2.1.1      2022-07-06 [1] CRAN (R 4.2.2)\n fastICA          1.2-3      2021-09-25 [1] CRAN (R 4.2.1)\n fastmap          1.1.1      2023-02-24 [1] CRAN (R 4.2.2)\n forcats        * 1.0.0.9000 2023-01-31 [1] Github (tidyverse/forcats@4a8525a)\n foreach          1.5.2      2022-02-02 [1] CRAN (R 4.2.0)\n fs               1.6.1      2023-02-06 [1] CRAN (R 4.2.2)\n generics         0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n GetoptLong       1.0.5      2020-12-15 [1] CRAN (R 4.2.0)\n ggplot2        * 3.4.1.9000 2023-03-08 [1] Github (tidyverse/ggplot2@04a5ef2)\n ggrepel          0.9.3      2023-02-03 [1] CRAN (R 4.2.2)\n ggthemes         4.2.4      2021-01-20 [1] CRAN (R 4.2.0)\n GlobalOptions    0.1.2      2020-06-10 [1] CRAN (R 4.2.0)\n glue             1.6.2.9000 2023-01-26 [1] Github (tidyverse/glue@794eb37)\n gridExtra        2.3        2017-09-09 [1] CRAN (R 4.2.0)\n gt               0.8.0.9000 2023-03-06 [1] Github (rstudio/gt@6272bc5)\n gtable           0.3.1.9000 2022-09-26 [1] Github (r-lib/gtable@2e33c5b)\n hms              1.1.2      2022-08-19 [1] CRAN (R 4.2.1)\n HSMMSingleCell   1.16.0     2022-04-28 [1] Bioconductor\n htmltools        0.5.4.9000 2023-02-23 [1] Github (rstudio/htmltools@48c46ed)\n htmlwidgets      1.6.1.9000 2023-01-08 [1] Github (ramnathv/htmlwidgets@843eee9)\n httpuv           1.6.9      2023-02-14 [1] CRAN (R 4.2.2)\n igraph           1.4.1      2023-02-24 [1] CRAN (R 4.2.2)\n IRanges          2.30.1     2022-08-18 [1] Bioconductor\n irlba            2.3.5.1    2022-10-03 [1] CRAN (R 4.2.1)\n iterators        1.0.14     2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite         1.8.4      2022-12-06 [1] CRAN (R 4.2.2)\n knitr            1.42       2023-01-25 [1] CRAN (R 4.2.2)\n labeling         0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n later            1.3.0      2021-08-18 [1] CRAN (R 4.2.2)\n lattice          0.20-45    2021-09-22 [2] CRAN (R 4.2.2)\n leidenbase       0.1.14     2022-12-14 [1] CRAN (R 4.2.2)\n lifecycle        1.0.3.9000 2023-03-08 [1] Github (r-lib/lifecycle@9ac73f5)\n limma            3.52.4     2022-09-27 [1] Bioconductor\n lubridate      * 1.9.2      2023-02-10 [1] CRAN (R 4.2.2)\n magick           2.7.3      2021-08-18 [1] CRAN (R 4.2.0)\n magrittr         2.0.3      2022-03-30 [1] CRAN (R 4.2.2)\n Matrix         * 1.5-3      2022-11-11 [1] CRAN (R 4.2.2)\n matrixStats      0.63.0     2022-11-18 [1] CRAN (R 4.2.2)\n memoise          2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n mime             0.12       2021-09-28 [1] CRAN (R 4.2.2)\n miniUI           0.1.1.1    2018-05-18 [1] CRAN (R 4.2.0)\n monocle          2.24.1     2022-06-09 [1] Bioconductor\n munsell          0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n paletteer        1.5.0.9000 2022-10-19 [1] Github (EmilHvitfeldt/paletteer@3d78902)\n patchwork      * 1.1.2.9000 2022-08-20 [1] Github (thomasp85/patchwork@c14c960)\n pheatmap         1.0.12     2019-01-04 [1] CRAN (R 4.2.0)\n pillar           1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n pkgbuild         1.4.0.9000 2023-02-18 [1] Github (r-lib/pkgbuild@9ec92a0)\n pkgconfig        2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n pkgload          1.3.2      2022-11-16 [1] CRAN (R 4.2.2)\n plyr             1.8.8      2022-11-11 [1] CRAN (R 4.2.2)\n png              0.1-8      2022-11-29 [1] CRAN (R 4.2.2)\n prettyunits      1.1.1.9000 2022-04-22 [1] Github (r-lib/prettyunits@8706d89)\n prismatic        1.1.1      2022-08-15 [1] CRAN (R 4.2.1)\n processx         3.8.0      2022-10-26 [1] CRAN (R 4.2.1)\n profvis          0.3.7      2020-11-02 [1] CRAN (R 4.2.2)\n promises         1.2.0.1    2021-02-11 [1] CRAN (R 4.2.2)\n ps               1.7.2      2022-10-26 [1] CRAN (R 4.2.1)\n purrr          * 1.0.1.9000 2023-02-08 [1] Github (tidyverse/purrr@fd5a732)\n qlcMatrix        0.9.7      2018-04-20 [1] CRAN (R 4.2.0)\n R.cache          0.16.0     2022-07-21 [1] CRAN (R 4.2.1)\n R.methodsS3      1.8.2      2022-06-13 [1] CRAN (R 4.2.0)\n R.oo             1.25.0     2022-06-12 [1] CRAN (R 4.2.0)\n R.utils          2.12.2     2022-11-11 [1] CRAN (R 4.2.2)\n R6               2.5.1.9000 2022-10-29 [1] Github (r-lib/R6@e6b5eaf)\n ragg             1.2.5.9000 2023-03-08 [1] Github (r-lib/ragg@69ad967)\n RANN             2.6.1      2019-01-08 [1] CRAN (R 4.2.0)\n RColorBrewer     1.1-3      2022-04-03 [1] CRAN (R 4.2.0)\n Rcpp             1.0.10     2023-01-22 [1] CRAN (R 4.2.2)\n readr          * 2.1.4.9000 2023-03-02 [1] Github (tidyverse/readr@eeb8f6b)\n rematch2         2.1.2      2020-05-01 [1] CRAN (R 4.2.0)\n remotes          2.4.2.9000 2023-02-18 [1] Github (r-lib/remotes@1e12140)\n reshape2         1.4.4      2020-04-09 [1] CRAN (R 4.2.0)\n rjson            0.2.21     2022-01-09 [1] CRAN (R 4.2.0)\n rlang            1.1.0      2023-03-08 [1] Github (r-lib/rlang@60159c7)\n rmarkdown        2.20.1     2023-02-10 [1] Github (rstudio/rmarkdown@a75dc37)\n Rtsne            0.17       2022-12-13 [1] Github (jkrijthe/Rtsne@ca6f630)\n Rttf2pt1         1.3.12     2023-01-22 [1] CRAN (R 4.2.2)\n S4Vectors        0.34.0     2022-04-26 [1] Bioconductor\n sass             0.4.5      2023-01-24 [1] CRAN (R 4.2.2)\n scales           1.2.1.9000 2022-08-20 [1] Github (r-lib/scales@b3df2fb)\n sessioninfo      1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n shape            1.4.6      2021-05-19 [1] CRAN (R 4.2.0)\n shiny            1.7.4      2022-12-15 [1] CRAN (R 4.2.2)\n slam             0.1-50     2022-01-08 [1] CRAN (R 4.2.1)\n sparsesvd        0.2-2      2023-01-14 [1] CRAN (R 4.2.2)\n stringi          1.7.12     2023-01-11 [1] CRAN (R 4.2.2)\n stringr        * 1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n styler         * 1.9.1      2023-03-05 [1] Github (r-lib/styler@57bbf4e)\n systemfonts      1.0.4      2022-02-11 [1] CRAN (R 4.2.2)\n textshaping      0.3.6      2021-10-13 [1] CRAN (R 4.2.2)\n tibble         * 3.2.0.9000 2023-03-08 [1] Github (tidyverse/tibble@a310014)\n tidyr          * 1.3.0.9000 2023-01-25 [1] Github (tidyverse/tidyr@0764e65)\n tidyselect       1.2.0.9000 2023-03-08 [1] Github (r-lib/tidyselect@177a190)\n tidyverse      * 2.0.0.9000 2023-03-08 [1] Github (tidyverse/tidyverse@37018d1)\n timechange       0.2.0      2023-01-11 [1] CRAN (R 4.2.2)\n tzdb             0.3.0      2022-03-28 [1] CRAN (R 4.2.2)\n urlchecker       1.0.1      2021-11-30 [1] CRAN (R 4.2.0)\n usethis          2.1.6.9000 2023-03-08 [1] Github (r-lib/usethis@dac38d0)\n utf8             1.2.3      2023-01-31 [1] CRAN (R 4.2.2)\n vctrs            0.5.2.9000 2023-03-08 [1] Github (r-lib/vctrs@469411a)\n VGAM             1.1-7      2022-07-06 [1] CRAN (R 4.2.1)\n viridis          0.6.2      2021-10-13 [1] CRAN (R 4.2.0)\n viridisLite      0.4.1      2022-08-22 [1] CRAN (R 4.2.1)\n vroom            1.6.1.9000 2023-02-10 [1] Github (r-lib/vroom@a7769d1)\n wesanderson      0.3.6.9000 2022-04-22 [1] Github (karthik/wesanderson@2796b59)\n withr            2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun             0.37       2023-01-31 [1] CRAN (R 4.2.2)\n xtable           1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n yaml             2.3.7      2023-01-23 [1] CRAN (R 4.2.2)\n\n [1] /opt/homebrew/lib/R/4.2/site-library\n [2] /opt/homebrew/Cellar/r/4.2.2_1/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\nStyling  1  files:\n global_reprogramming_of_transcription.qmd ✔ \n─────────────────────────────────────────\nStatus  Count   Legend \n✔   1   File unchanged.\nℹ   0   File changed.\n✖   0   Styling threw an error.\n─────────────────────────────────────────"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Rational Reprogramming of Cellular States by Combinatorial Perturbation",
    "section": "",
    "text": "Workflow\n\n\nRational Reprogramming of Cellular States by Combinatorial Perturbation\n\n\n\n\n\n\n Citation\n\nJialei Duan#, Boxun Li#, Minoti Bhakta#, Shiqi Xie, Pei Zhou, Nikhil V. Munshi*, Gary C. Hon* (2019). Rational Reprogramming of Cellular States by Combinatorial Perturbation. Cell Rep. 27, 3486–3499.e6. DOI: 10.1016/j.celrep.2019.05.079"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "from datetime import datetime\ndatetime.today().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n'2023-03-08 18:03:00'"
  },
  {
    "objectID": "unbiased_reprogramming.html",
    "href": "unbiased_reprogramming.html",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "",
    "text": "Sys.time()\n\n[1] \"2023-03-08 18:03:02 CST\"\nSys.timezone()\n\n[1] \"America/Chicago\""
  },
  {
    "objectID": "unbiased_reprogramming.html#preparation",
    "href": "unbiased_reprogramming.html#preparation",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "Preparation",
    "text": "Preparation\nFunctions\nLoad required packages.\n\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(patchwork)\nlibrary(extrafont)\n\n\nsource(file = file.path(SCRIPT_DIR, \"utilities.R\"))\n\n\n`%+replace%` &lt;- ggplot2::`%+replace%`\n\nSymbols\n\nPROJECT_DIR &lt;- file.path(\n    \"/Users/jialei/Dropbox/Data/Projects/UTSW/Cellular_reprogramming\",\n    \"Cardiac_reprogramming/Notebooks\"\n)\n\n\ngene_symbols &lt;- vroom::vroom(\n    file = file.path(\n        PROJECT_DIR, \"data\", \"misc\", \"genes.tsv\"\n    ),\n    col_names = FALSE\n)\n\ngene_symbols &lt;- setNames(object = gene_symbols$X2, nm = gene_symbols$X1)\n\ngene_symbols |&gt; head()\n\nENSMUSG00000051951 ENSMUSG00000089699 ENSMUSG00000102343 ENSMUSG00000025900 \n            \"Xkr4\"           \"Gm1992\"          \"Gm37381\"              \"Rp1\" \nENSMUSG00000109048 ENSMUSG00000025902 \n             \"Rp1\"            \"Sox17\" \n\n\n\nlength(gene_symbols)\n\n[1] 27999\n\n\nMatrix\n\nmatrix_readcount_use &lt;- Matrix::sparseMatrix(\n    i = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/drop-seq\", \"expr_readcount_raw_csc_indices.rds\"\n        )\n    ),\n    p = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/drop-seq\", \"expr_readcount_raw_csc_indptr.rds\"\n        )\n    ),\n    x = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/drop-seq\", \"expr_readcount_raw_csc_values.rds\"\n        )\n    ),\n    dims = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/drop-seq\", \"expr_readcount_raw_csc_shape.rds\"\n        )\n    ),\n    dimnames = readRDS(\n        file.path(\n            PROJECT_DIR, \"data/drop-seq\", \"expr_readcount_raw_csc_dimnames.rds\"\n        )\n    ),\n    index1 = FALSE\n)\n\n\ndim(matrix_readcount_use)\n\n[1] 27999 27416\n\n\n\nrownames(matrix_readcount_use) &lt;- paste(\n    rownames(matrix_readcount_use),\n    gene_symbols[rownames(matrix_readcount_use)],\n    sep = \"_\"\n)\n\nmatrix_readcount_use[1:5, 1:5] |&gt;\n    as.matrix() |&gt;\n    knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\nJD126-1-2_TTTCTATATACA.bam\nJD126-1-2_CCTAGAAACCAG.bam\nJD126-1-2_TCATAGTCTATT.bam\nJD126-1-2_ATGACCTTTCCC.bam\nJD126-1-2_CATTAGTGATGG.bam\n\n\n\nENSMUSG00000051951_Xkr4\n0\n0\n0\n0\n0\n\n\nENSMUSG00000089699_Gm1992\n0\n0\n0\n0\n0\n\n\nENSMUSG00000102343_Gm37381\n0\n0\n0\n0\n0\n\n\nENSMUSG00000025900_Rp1\n0\n0\n0\n0\n0\n\n\nENSMUSG00000109048_Rp1\n0\n0\n0\n0\n0\n\n\n\n\n\nEmbedding\n\nembedding &lt;- readRDS(\n    file = file.path(PROJECT_DIR, \"data/drop-seq\", \"tsne_out_coords.rds\")\n)\n\n\ndim(embedding)\n\n[1] 25776     7\n\n\n\nCheck memory usage.\n\npurrr::walk(\n    list(matrix_readcount_use, embedding), \\(x) {\n        print(object.size(x), units = \"auto\", standard = \"SI\")\n    }\n)\n\n751.2 MB\n3.4 MB"
  },
  {
    "objectID": "unbiased_reprogramming.html#clustering",
    "href": "unbiased_reprogramming.html#clustering",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "Clustering",
    "text": "Clustering\n\nx_column &lt;- \"x\"\ny_column &lt;- \"y\"\n\nGEOM_POINT_SIZE &lt;- 0.5\nEMBEDDING_TITLE_PREFIX &lt;- \"t-SNE\"\nRASTERISED &lt;- FALSE\n\nEmbedding\n\nembedding |&gt;\n    tibble::rownames_to_column(var = \"cell\") |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::rename(batch = batch.id) |&gt;\n    dplyr::group_by(batch) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(batch),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**Drop-Seq**; Batch\")\n    ) |&gt;\n    gt::tab_source_note(\n        source_note = gt::md(\n            \"***[Here](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE117795)** are the details.*\"\n        )\n    )\n\n\n\n\n\n\n\n\nDrop-Seq; Batch\n    \n\n\n      batch\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\nJD126-1-2\n335\n3,697.0\n1,839.0\n\n\n\nJD126A1\n289\n3,499.0\n1,669.0\n\n\n\nJD126A5\n310\n3,575.0\n1,759.5\n\n\n\nJD126B\n625\n3,604.0\n1,733.0\n\n\n\nJD131-A\n418\n1,765.0\n1,105.0\n\n\n\nJD131-B\n371\n1,895.0\n1,146.0\n\n\n\nJD131-C\n381\n1,894.0\n1,168.0\n\n\n\nJD135A\n101\n3,203.0\n1,521.0\n\n\n\nJD135Y\n222\n1,755.5\n1,007.0\n\n\n\nJD135Z\n92\n1,890.0\n966.5\n\n\n\nJD136A\n172\n2,348.5\n1,285.5\n\n\n\nJD136B\n269\n1,603.0\n975.0\n\n\n\nJD136C\n168\n1,140.5\n734.0\n\n\n\nJD136DE\n370\n1,042.5\n694.0\n\n\n\nJD136F\n251\n1,752.0\n993.0\n\n\n\nJD136G\n500\n1,341.5\n827.0\n\n\n\nJD137A\n268\n2,796.5\n1,410.5\n\n\n\nJD145A1\n269\n3,332.0\n1,623.0\n\n\n\nJD145A5\n267\n2,911.0\n1,503.0\n\n\n\nJD145B1\n284\n3,531.5\n1,704.0\n\n\n\nJD145B5\n287\n1,905.0\n1,045.0\n\n\n\nJD145C\n169\n2,235.0\n1,056.0\n\n\n\nJD145D\n187\n1,797.0\n941.0\n\n\n\nJD145E\n287\n977.0\n590.0\n\n\n\nJD145F\n103\n533.0\n396.0\n\n\n\nJD146A1\n530\n3,210.5\n1,555.5\n\n\n\nJD146A5\n549\n4,260.0\n1,935.0\n\n\n\nJD146B1\n466\n4,879.5\n1,973.0\n\n\n\nJD146B5\n444\n4,035.5\n1,828.0\n\n\n\nJD146C1\n452\n5,129.5\n2,004.5\n\n\n\nJD146C5\n420\n2,922.0\n1,399.5\n\n\n\nJD149A\n275\n1,118.0\n699.0\n\n\n\nJD149B\n251\n823.0\n531.0\n\n\n\nJD149C\n382\n1,179.5\n747.5\n\n\n\nJD149D\n365\n1,054.0\n688.0\n\n\n\nJD149E\n236\n854.5\n603.0\n\n\n\nJD150-3A\n393\n1,486.0\n911.0\n\n\n\nJD150-3B\n345\n1,624.0\n1,002.0\n\n\n\nJD150-3C\n487\n2,110.0\n1,190.0\n\n\n\nJD150-4A\n330\n1,652.0\n962.0\n\n\n\nJD150-4B\n370\n1,476.5\n893.5\n\n\n\nJD150A\n342\n778.5\n487.0\n\n\n\nJD150B\n317\n849.0\n564.0\n\n\n\nJD150C\n346\n1,372.0\n888.5\n\n\n\nJD150D\n465\n1,081.0\n723.0\n\n\n\nJD164_165\n272\n3,324.5\n1,935.5\n\n\n\nJD166_167\n204\n6,267.5\n3,047.0\n\n\n\nJD168A\n252\n11,674.5\n4,225.0\n\n\n\nJD168B\n240\n4,899.5\n2,510.5\n\n\n\nJD168C\n182\n14,665.5\n4,678.5\n\n\n\nJD168_169\n236\n4,234.5\n2,302.5\n\n\n\nJD169A\n306\n7,700.0\n3,450.0\n\n\n\nJD169B\n178\n13,284.5\n4,515.5\n\n\n\nJD169C\n206\n10,929.5\n4,092.0\n\n\n\nJD170A\n148\n11,175.0\n4,197.0\n\n\n\nJD170B\n108\n12,311.0\n4,191.0\n\n\n\nJD170C\n150\n11,961.5\n4,228.0\n\n\n\nJD170_171\n288\n13,620.5\n4,505.5\n\n\n\nJD171A\n270\n7,281.0\n3,207.0\n\n\n\nJD171B\n224\n11,545.0\n4,211.5\n\n\n\nJD171C\n166\n9,291.0\n3,673.0\n\n\n\nPZ473\n168\n9,368.5\n3,888.5\n\n\n\nPZ474\n188\n6,470.0\n3,116.5\n\n\n\nPZ475\n326\n11,516.5\n4,077.0\n\n\n\nPZ476\n292\n10,177.5\n3,943.0\n\n\n\nPZ477\n552\n5,562.5\n2,731.0\n\n\n\nPZ478\n344\n7,171.0\n3,283.5\n\n\n\nPZ479\n356\n9,106.0\n3,655.0\n\n\n\nPZ480\n196\n10,180.5\n3,878.5\n\n\n\nPZ481\n132\n11,876.5\n4,161.0\n\n\n\nPZ482\n70\n4,286.0\n2,213.0\n\n\n\nPZ483\n98\n4,452.5\n2,233.5\n\n\n\nPZ484\n224\n9,902.5\n3,863.5\n\n\n\nPZ485\n264\n10,482.5\n3,963.5\n\n\n\nPZ486\n344\n6,220.0\n2,901.5\n\n\n\nPZ487\n238\n5,281.5\n2,571.5\n\n\n\nPZ492\n399\n1,618.0\n960.0\n\n\n\nPZ493\n241\n1,394.0\n841.0\n\n\n\nPZ496\n344\n7,004.5\n3,245.0\n\n\n\nPZ497\n208\n9,547.0\n3,810.5\n\n\n\nPZ580\n472\n8,199.5\n3,482.5\n\n\n\nPZ581\n360\n6,468.0\n3,058.5\n\n\n\nPZ582\n214\n9,730.5\n3,892.5\n\n\n\nPZ583\n120\n10,060.5\n3,977.0\n\n\n\nPZ584\n190\n14,141.5\n4,915.0\n\n\n\nPZ585\n152\n15,586.5\n4,924.0\n\n\n\nPZ586\n292\n4,879.0\n2,466.5\n\n\n\nPZ587\n204\n11,968.5\n4,318.5\n\n\n\nPZ588\n110\n24,547.5\n5,941.0\n\n\n\nPZ589\n110\n11,439.0\n3,965.5\n\n\n\nPZ590\n94\n17,243.5\n5,124.5\n\n\n\nPZ660\n148\n2,893.5\n1,478.0\n\n\n\nPZ661\n136\n2,414.5\n1,289.5\n\n\nCount\n93\n—\n—\n—\n\n\nMean\n—\n277.2\n5,734.1\n2,348.6\n\n\nSum\n—\n25,776\n—\n—\n\n\n\nHere are the details.\n    \n\n\n\n\n\nembedding &lt;- embedding |&gt;\n    tibble::rownames_to_column(var = \"cell\") |&gt;\n    dplyr::mutate(\n        group = dplyr::case_when(\n            category %in% c(\"JD168\") ~ \"Reprogrammed\",\n            category %in% c(\"JD174\") ~ \"Control\",\n            TRUE ~ \"Primary\"\n        ),\n        group = factor(\n            group,\n            levels = c(\"Primary\", \"Reprogrammed\", \"Control\")\n        )\n    )\n\n\np_embedding_cluster &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$cluster |&gt; as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Cluster\"),\n    color_labels = TRUE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_UMI &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = log10(Matrix::colSums(matrix_readcount_use[, embedding$cell])),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; UMI\"),\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding()\n\np_embedding_MT &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = (colSums(matrix_readcount_use[\n        stringr::str_detect(\n            string = stringr::str_remove(\n                string = rownames(matrix_readcount_use),\n                pattern = \"^E.+_\"\n            ),\n            pattern = \"mt-\"\n        ),\n    ]) / colSums(matrix_readcount_use))[embedding$cell],\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; MT %\"),\n    color_legend = TRUE,\n    sort_values = TRUE,\n    shuffle_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) + theme_customized_embedding()\n\np_embedding_group &lt;- plot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding$group |&gt; as.factor(),\n    label = glue::glue(\"{EMBEDDING_TITLE_PREFIX}; Group\"),\n    color_labels = FALSE,\n    color_legend = TRUE,\n    sort_values = FALSE,\n    shuffle_values = TRUE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding() +\n    ggplot2::scale_color_manual(\n        values = c(\n            Primary = \"#00AFBB\",\n            Reprogrammed = \"#8BC34A\",\n            Control = \"#E7B800\"\n        )\n    )\n\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(cluster) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    gt::gt() |&gt;\n    gt::data_color(\n        columns = c(median_umis),\n        fn = scales::col_numeric(\n            palette = c(\n                \"green\", \"orange\", \"red\"\n            ),\n            domain = NULL\n        )\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(num_cells),\n        sep_mark = \",\",\n        decimals = 0\n    ) |&gt;\n    gt::fmt_number(\n        columns = c(median_umis, median_features),\n        sep_mark = \",\",\n        decimals = 1\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(cluster),\n        fns = list(\n            Count = ~ n()\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(median_umis:median_features),\n        fns = list(\n            Mean = ~ mean(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 1, use_seps = TRUE)\n    ) |&gt;\n    gt::grand_summary_rows(\n        columns = c(num_cells),\n        fns = list(\n            Sum = ~ sum(.)\n        ),\n        fmt = ~ gt::fmt_number(., decimals = 0, use_seps = TRUE)\n    ) |&gt;\n    gt::tab_header(\n        title = gt::md(\"**Drop-Seq**; Clustering\")\n    )\n\n\n\n\n\n\n\n\nDrop-Seq; Clustering\n    \n\n\n      cluster\n      num_cells\n      median_umis\n      median_features\n    \n\n\n\n\n1\n2,875\n13,196.0\n4,578.0\n\n\n\n2\n2,798\n8,594.0\n3,639.5\n\n\n\n3\n2,786\n6,165.0\n2,905.0\n\n\n\n4\n2,710\n933.0\n561.5\n\n\n\n5\n2,356\n1,505.5\n1,013.0\n\n\n\n6\n2,139\n2,590.0\n1,249.0\n\n\n\n7\n1,934\n2,238.5\n1,347.0\n\n\n\n8\n1,575\n5,225.0\n1,891.0\n\n\n\n9\n1,075\n5,719.0\n2,203.0\n\n\n\n10\n871\n12,955.0\n4,294.0\n\n\n\n11\n708\n4,111.0\n1,872.5\n\n\n\n12\n681\n3,495.0\n1,956.0\n\n\n\n13\n669\n2,438.0\n1,483.0\n\n\n\n14\n556\n725.0\n530.5\n\n\n\n15\n478\n2,661.0\n1,606.5\n\n\n\n16\n474\n1,368.0\n906.5\n\n\n\n17\n254\n4,995.5\n2,172.5\n\n\n\n18\n236\n1,737.0\n256.5\n\n\n\n19\n181\n620.0\n372.0\n\n\n\n20\n165\n9,490.0\n3,679.0\n\n\n\n21\n133\n5,234.0\n2,464.0\n\n\n\n22\n122\n6,274.0\n2,877.0\n\n\nCount\n22\n—\n—\n—\n\n\nMean\n—\n—\n4,648.6\n1,993.5\n\n\nSum\n—\n25,776\n—\n—\n\n\n\n\n\n\n\npurrr::reduce(\n    list(\n        p_embedding_cluster,\n        p_embedding_UMI,\n        p_embedding_MT,\n        p_embedding_group\n    ),\n    `+`\n) +\n    patchwork::plot_layout(ncol = 2) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\n\nlibrary(formattable)\n\n\nAttaching package: 'formattable'\n\n\nThe following object is masked from 'package:patchwork':\n\n    area\n\nembedding |&gt;\n    dplyr::mutate(\n        num_umis = colSums(matrix_readcount_use[, cell]),\n        num_features = colSums(matrix_readcount_use[, cell] &gt; 0),\n    ) |&gt;\n    dplyr::group_by(group) |&gt;\n    dplyr::summarise(\n        num_cells = n(),\n        median_umis = median(num_umis),\n        median_features = median(num_features)\n    ) |&gt;\n    formattable::formattable(\n        list(\n            # num_cells = formattable::color_tile(\"transparent\", \"lightpink\"),\n            num_cells = formattable::color_bar(\"Lightpink\"),\n            median_umis = formattable::color_bar(\"lightgreen\"),\n            median_features = formattable::color_bar(\"lightblue\")\n        ),\n        full_width = FALSE,\n        caption = \"Drop-Seq; Group\"\n    )\n\n\n\n\nDrop-Seq; Group\n\n\n\ngroup\n\n\nnum_cells\n\n\nmedian_umis\n\n\nmedian_features\n\n\n\n\n\nPrimary\n\n\n15684\n\n\n2030\n\n\n1139\n\n\n\n\nReprogrammed\n\n\n8730\n\n\n8532\n\n\n3562\n\n\n\n\nControl\n\n\n1362\n\n\n9383\n\n\n3789\n\n\n\n\n\n\n\n## | column: body-outset\n\npurrr::map(levels(embedding$group), \\(x) {\n    plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = as.integer(embedding$group == x) |&gt; as.factor(),\n        label = glue::glue(\n            \"{EMBEDDING_TITLE_PREFIX}; {x}: {sum(embedding$group == x)}\"\n        ),\n        color_labels = FALSE,\n        color_legend = FALSE,\n        sort_values = TRUE,\n        shuffle_values = FALSE,\n        rasterise = RASTERISED,\n        geom_point_size = GEOM_POINT_SIZE\n    ) +\n        theme_customized_embedding() +\n        ggplot2::scale_color_manual(\n            values = c(\"grey70\", \"salmon\")\n        )\n}) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 3) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\n\n\n\n\n\n\nExtract colors from the initial plots to keep colors consistent.\n\ncolor_palette &lt;- ggplot2::ggplot_build(p_embedding_cluster)$data[[1]] |&gt;\n    dplyr::select(color = colour, cluster = group) |&gt;\n    unique() |&gt;\n    dplyr::arrange(cluster)\n\ncolor_palette &lt;- setNames(\n    object = color_palette$color,\n    nm = color_palette$cluster\n)\n\nscales::show_col(color_palette, borders = NA)\n\n\n\n\n\n\n\n\ncell_type_segments &lt;- data.frame(\n    x = c(\n        -40, -40, -40, -40, -69, -35, 40, 40, 40, 65, 28, -12, -57.5,\n        -57.5, -57.5\n    ),\n    y = c(\n        60, 60, 60, 60, 20, -55, -70, -70, -70, 50, 55, 65, -52.5,\n        -52.5, -52.5\n    ),\n    xend = c(\n        -30, -44, -60, -30, -69, -35, 32, 0, 40, 65, 35, -20, -17.5,\n        -53, -37.5\n    ),\n    yend = c(\n        35, 15, -5, -22, 35, -65, -58, -66, -45, 36, 60, 70, -25,\n        -45, -47.5\n    ),\n    cluster = c(4, 6, 9, 11, 8, 12, 7, 13, 14, 16, 5, 15, 2, 20, 12)\n)\n\ncell_type_labels &lt;- data.frame(\n    x = c(-40, -61.5, -43, 52, 56, 46, -22, -58),\n    y = c(65, 45, -70, -70, 55, 64, 75, -58),\n    label = c(\n        \"Atrial myocytes\",\n        \"Ventricular\\nmyocytes\",\n        \"Epicardial cells\",\n        \"Fibroblasts\",\n        \"Lymphocytes\",\n        \"Endothelial cells\",\n        \"Macrophages\",\n        \"MEF-derived\"\n    )\n)\n\ncluster_labels &lt;- embedding |&gt;\n    dplyr::group_by(cluster) |&gt;\n    dplyr::summarise(\n        x = median(x),\n        y = median(y)\n    ) |&gt;\n    as.data.frame()\n\nplot_embedding(\n    data = embedding[, c(x_column, y_column)],\n    color = embedding |&gt;\n        dplyr::mutate(\n            color_group = dplyr::case_when(\n                group %in% c(\"Reprogrammed\", \"Control\") ~ \"MEF-derived\",\n                TRUE ~ as.character(cluster)\n            )\n        ) |&gt;\n        dplyr::pull(color_group) |&gt; as.factor(),\n    label = NULL,\n    color_labels = FALSE,\n    color_legend = FALSE,\n    sort_values = FALSE,\n    rasterise = RASTERISED,\n    geom_point_size = GEOM_POINT_SIZE\n) +\n    theme_customized_embedding(void = TRUE) +\n    ggplot2::scale_color_manual(\n        values = c(color_palette, \"MEF-derived\" = \"salmon\")\n    ) +\n    ggplot2::geom_segment(\n        data = cell_type_segments,\n        ggplot2::aes(x = x, xend = xend, y = y, yend = yend),\n        color = \"grey50\",\n        size = .2\n    ) +\n    ggplot2::geom_text(\n        data = cell_type_labels,\n        ggplot2::aes(x, y, label = label),\n        color = c(rep(\"black\", 2), \"#00BFC4\", rep(\"black\", 4), \"#FF5722\"),\n        size = 2.8,\n        family = \"Arial\"\n    ) +\n    ggplot2::annotate(\n        geom = \"text\",\n        family = \"Arial\",\n        x = cluster_labels[, \"x\"],\n        y = cluster_labels[, \"y\"], label = cluster_labels[, 1],\n        parse = TRUE,\n        size = 2,\n        color = c(\"black\")\n    )\n\n\n\n\n\n\npdf_width &lt;- 104\npdf_height &lt;- 74\nfile_name &lt;- glue::glue(\n    \"Rplot_embedding_dropseq_{EMBEDDING_TITLE_PREFIX}_\",\n    \"cell_group_{pdf_width}_{pdf_height}.pdf\"\n)\nif (!file.exists(file_name)) {\n    ggplot2::ggsave(\n        filename = file_name,\n        useDingbats = FALSE,\n        plot = ggplot2::last_plot(),\n        device = NULL,\n        path = NULL,\n        scale = 1,\n        width = pdf_width,\n        height = pdf_height,\n        units = c(\"mm\"),\n    )\n}\n\nComposition\nBar charts indicating the cellar composition of t-SNE clusters defined in Figure 1B.\n\ncalc_group_composition(\n    data = embedding,\n    x = \"cluster\",\n    group = \"group\"\n) |&gt;\n    dplyr::mutate(\n        cluster = factor(\n            cluster,\n            levels = c(\n                19, 18,\n                9, 6, 11, 4, 8, 21,\n                3, 1, 2, 10, 17, 22, 20,\n                13, 7, 14, 12, 15, 5, 16\n            )\n        )\n    ) |&gt;\n    plot_barplot(\n        x = \"cluster\",\n        y = \"percentage\",\n        z = \"group\",\n        legend_ncol = 1\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            Primary = \"#00AFBB\",\n            Reprogrammed = \"#8BC34A\",\n            Control = \"#E7B800\"\n        )\n    )"
  },
  {
    "objectID": "unbiased_reprogramming.html#expression",
    "href": "unbiased_reprogramming.html#expression",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "Expression",
    "text": "Expression\nEmbedding\n\nFEATURES_SELECTED &lt;- c(\n    \"ENSMUSG00000009471_Myod1\",\n    \"ENSMUSG00000026414_Tnnt2\",\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\",\n    \"ENSMUSG00000049382_Krt8\",\n    \"ENSMUSG00000079018_Ly6c1\",\n    \"ENSMUSG00000049436_Upk1b\",\n    \"ENSMUSG00000021391_Cenpp\"\n)\n\n\npurrr::map(FEATURES_SELECTED, \\(x) {\n    selected_feature &lt;- x\n\n    cat(selected_feature, \"\\n\")\n    values &lt;- log10(\n        calc_cpm(matrix_readcount_use[, embedding$cell])\n        [selected_feature, ] + 1\n    )\n\n    p1 &lt;- plot_embedding(\n        data = embedding[, c(x_column, y_column)],\n        color = values,\n        label = paste(\n            EMBEDDING_TITLE_PREFIX,\n            selected_feature |&gt; stringr::str_remove(pattern = \"^E.+_\"),\n            sep = \"; \"\n        ),\n        color_legend = TRUE,\n        sort_values = TRUE,\n        rasterise = RASTERISED,\n        geom_point_size = GEOM_POINT_SIZE * 1.25,\n        na_value = \"grey80\"\n    ) +\n        theme_customized_embedding()\n\n    return(p1)\n}) |&gt;\n    # unlist(recursive = FALSE) |&gt;\n    purrr::reduce(`+`) +\n    patchwork::plot_layout(ncol = 2, byrow = FALSE) +\n    patchwork::plot_annotation(\n        theme = ggplot2::theme(plot.margin = ggplot2::margin())\n    )\n\nENSMUSG00000009471_Myod1 \nENSMUSG00000026414_Tnnt2 \nENSMUSG00000016458_Wt1 \nENSMUSG00000025105_Bnc1 \nENSMUSG00000049382_Krt8 \nENSMUSG00000079018_Ly6c1 \nENSMUSG00000049436_Upk1b \nENSMUSG00000021391_Cenpp \n\n\n\n\n\n\n\n\nViolin\nViolin plot illustrating the expression of cardiac markers from single-cell expression data derived from P0 mouse heart and reprogrammed/uninfected MEFs.\n\nlabels_y &lt;- c(\n    19, 18,\n    9, 6, 11, 4, 8, 21,\n    3, 1, 2, 10, 17, 22, 20,\n    13, 7, 14, 12, 15, 5, 16\n)\n\nplot_violin(\n    cells = embedding |&gt;\n        dplyr::mutate(\n            cluster = factor(\n                cluster,\n                levels = labels_y\n            )\n        ) |&gt;\n        split(~cluster) |&gt;\n        purrr::map(\\(x) {\n            x |&gt; dplyr::pull(cell)\n        }),\n    features = c(\n        \"ENSMUSG00000026414_Tnnt2\",\n        \"ENSMUSG00000013936_Myl2\",\n        \"ENSMUSG00000042045_Sln\",\n        \"ENSMUSG00000001506_Col1a1\",\n        \"ENSMUSG00000005836_Gata6\",\n        \"ENSMUSG00000005583_Mef2c\"\n    ),\n    matrix_cpm = calc_cpm(matrix_readcount_use)\n) +\n    theme_customized_violin(\n        axis_text_color_y = rev(color_palette[as.character(labels_y)])\n    ) +\n    ggplot2::scale_fill_manual(\n        values = color_palette[as.character(labels_y)]\n    ) +\n    ggplot2::scale_color_manual(\n        values = color_palette[as.character(labels_y)]\n    )\n\n\n\n\n\n\n\nBar plot\n\nbarplot_helper &lt;- function(cells, features, matrix_readcount) {\n    purrr::map(names(cells), \\(x) {\n        calc_cpm(matrix_readcount)[\n            features,\n            colnames(matrix_readcount) %in% cells[[x]]\n        ] |&gt;\n            Matrix::rowMeans() |&gt;\n            tibble::enframe(name = \"feature\") |&gt;\n            dplyr::mutate(group = x)\n    }) |&gt;\n        dplyr::bind_rows()\n}\n\nExpression of Myod1 in MEF-derived cells.\n\ncells_barplot &lt;- list(\n    embedding |&gt;\n        dplyr::filter(\n            cluster == 20 & category %in% (\"JD168\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            cluster != 20 & category %in% (\"JD168\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            category %in% (\"JD174\")\n        ) |&gt;\n        dplyr::pull(cell)\n)\nnames(cells_barplot) &lt;- c(\"Cluster 20\", \"Other\", \"Uninfected\")\n\nfeatures_barplot &lt;- c(\n    \"ENSMUSG00000009471_Myod1\",\n    \"ENSMUSG00000016458_Wt1\",\n    \"ENSMUSG00000025105_Bnc1\"\n)\n\nbarplot_helper(cells_barplot, features_barplot, matrix_readcount_use) |&gt;\n    dplyr::filter(feature == \"ENSMUSG00000009471_Myod1\") |&gt;\n    dplyr::mutate(\n        feature = stringr::str_remove(string = feature, pattern = \"^.+_\")\n    ) |&gt;\n    dplyr::mutate(value = log10(value + 1)) |&gt;\n    plot_barplot_simple(\n        x = \"group\",\n        y = \"value\",\n        z = \"feature\",\n        y_title = expression(\"Avg expr; log\"[10] * \" (CPM + 1)\")\n    ) +\n    theme_customized_violin(\n        strip_background_fill = \"grey80\",\n        panel_border_color = \"black\",\n        axis_text_x_angle = c(90, 1, 0.5)\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            c(\n                \"#FF5722\",\n                \"grey35\",\n                \"grey35\"\n            )\n        )\n    )\n\n\n\n\n\n\n\nExpression of Wt1 and Bnc1 in MEF-derived cells.\n\ncells_barplot &lt;- list(\n    embedding |&gt;\n        dplyr::filter(\n            cluster == 12,\n            !category %in% c(\"JD168\", \"JD174\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            cluster == 12 & category %in% (\"JD168\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            cluster != 12 & category %in% (\"JD168\")\n        ) |&gt;\n        dplyr::pull(cell),\n    embedding |&gt;\n        dplyr::filter(\n            category %in% (\"JD174\")\n        ) |&gt;\n        dplyr::pull(cell)\n)\nnames(cells_barplot) &lt;- c(\"Primarry epi.\", \"Cluster 12\", \"Other\", \"Uninfected\")\n\nbarplot_helper(cells_barplot, features_barplot, matrix_readcount_use) |&gt;\n    dplyr::filter(feature != \"ENSMUSG00000009471_Myod1\") |&gt;\n    dplyr::mutate(\n        feature = stringr::str_remove(string = feature, pattern = \"^.+_\"),\n        feature = factor(\n            feature,\n            levels = c(\"Wt1\", \"Bnc1\")\n        )\n    ) |&gt;\n    dplyr::mutate(\n        value = log10(value + 1),\n        group = factor(\n            group,\n            levels = names(cells_barplot)\n        )\n    ) |&gt;\n    plot_barplot_simple(\n        x = \"group\",\n        y = \"value\",\n        z = \"feature\",\n        y_title = expression(\"Avg expr; log\"[10] * \" (CPM + 1)\")\n    ) +\n    theme_customized_violin(\n        strip_background_fill = \"grey80\",\n        panel_border_color = \"black\",\n        axis_text_x_angle = c(90, 1, 0.5)\n    ) +\n    ggplot2::scale_fill_manual(\n        values = c(\n            c(\n                \"#00BFC4\",\n                \"#FF5722\",\n                \"grey35\",\n                \"grey35\"\n            )\n        )\n    )\n\n\n\n\n\n\n\nLollipop\n10 TFs differentially expressed in primary epicardial cells compared with uninfected MEFs. Shown is the expression of 10F in MEFs and P0 mouse heart cells.\n\ncells_lollipop &lt;- embedding |&gt;\n    dplyr::filter(\n        !cluster %in% c(1, 2, 3, 10, 17, 20, 22),\n        !category %in% c(\"JD168\", \"JD174\")\n    ) |&gt;\n    split(~cluster) |&gt;\n    purrr::map(\\(x) {\n        x |&gt; dplyr::pull(cell)\n    })\n\ncells_lollipop &lt;- cells_lollipop[\n    purrr::map_lgl(cells_lollipop, \\(x) length(x) &gt; 0)\n]\n\ncells_lollipop$control &lt;- embedding |&gt;\n    dplyr::filter(category %in% c(\"JD168\", \"JD174\")) |&gt;\n    dplyr::pull(cell)\n\n\nlabels_y &lt;- c(\n    \"12\", \"control\", \"19\", \"18\", \"9\", \"6\", \"11\", \"4\", \"8\",\n    \"21\", \"13\", \"7\", \"14\", \"15\", \"5\", \"16\"\n)\n\n\nplot_lollipop(\n    cells = cells_lollipop[labels_y],\n    features = c(\n        \"ENSMUSG00000026628_Atf3\",\n        \"ENSMUSG00000016458_Wt1\",\n        \"ENSMUSG00000025105_Bnc1\",\n        \"ENSMUSG00000051910_Sox6\",\n        \"ENSMUSG00000045680_Tcf21\",\n        \"ENSMUSG00000038193_Hand2\",\n        \"ENSMUSG00000031965_Tbx20\",\n        \"ENSMUSG00000032419_Tbx18\",\n        \"ENSMUSG00000005836_Gata6\",\n        \"ENSMUSG00000036098_Myrf\"\n    ),\n    matrix_cpm = calc_cpm(matrix_readcount_use)\n) +\n    ggplot2::scale_y_discrete(\n        name = NULL,\n        labels = c(\n            \"Epicardial cell\",\n            \"Uninfected MEF\",\n            \"CM 2\",\n            \"CM 1\",\n            \"Atrial CM\",\n            \"Atrial CM\",\n            \"Atrial CM\",\n            \"Atrial CM\",\n            \"Ventricular CM\",\n            \"CM 3\",\n            \"Cardiac fibroblast\",\n            \"Cardiac fibroblast\",\n            \"Cardiac fibroblast\",\n            \"Macrophage\",\n            \"Endothelial cell\",\n            \"Lymphocyte\"\n        ) |&gt; rev()\n    ) +\n    theme_customized_violin(\n        axis_text_x_angle = c(-45, 1, 0.5),\n        axis_text_color_y = c(color_palette, control = \"grey35\")[rev(labels_y)],\n        panel_grid_major = TRUE\n    ) %+replace%\n    ggplot2::theme(\n        legend.margin = ggplot2::margin(\n            t = 0, r = 0, b = 0, l = 0, unit = \"mm\"\n        ),\n        legend.key.size = ggplot2::unit(2.5, \"mm\"),\n        legend.key.width = ggplot2::unit(4.0, \"mm\"),\n        legend.text = ggplot2::element_text(family = \"Arial\", size = 5),\n        legend.title = ggplot2::element_text(family = \"Arial\", size = 6),\n        legend.position = \"bottom\",\n        legend.box = \"vertical\" # \"horizontal\"\n    ) +\n    ggplot2::scale_size(\n        name = \"% cells expressing gene\",\n        breaks = seq(0, 1, .2),\n        labels = seq(0, 1, .2) * 100,\n        limits = c(0, 1),\n        range = c(0, 6),\n        guide = ggplot2::guide_legend(\n            title.position = \"top\",\n            title.hjust = 0.5,\n            label.position = \"bottom\",\n            nrow = 1,\n            byrow = TRUE,\n            order = 1\n        )\n    ) +\n    ggplot2::scale_color_viridis_c(\n        name = expression(paste(\"Avg expr; log\"[10], \"( CPM + 1)\")),\n        guide = ggplot2::guide_colourbar(\n            title.position = \"top\",\n            title.hjust = 1,\n            barwidth = 5,\n            barheight = 0.6,\n            direction = \"horizontal\",\n            order = 2\n        )\n    )"
  },
  {
    "objectID": "unbiased_reprogramming.html#gene-ontology-enrichment",
    "href": "unbiased_reprogramming.html#gene-ontology-enrichment",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "Gene Ontology enrichment",
    "text": "Gene Ontology enrichment\nGene ontology analysis for genes highly expressed in Cluster 20.\n\nsuppressPackageStartupMessages(library(topGO))\n\n\ngroupGOTerms:   GOBPTerm, GOMFTerm, GOCCTerm environments built.\n\npackageVersion(\"topGO\")\n\n[1] '2.48.0'\n\npackageVersion(\"org.Mm.eg.db\")\n\n[1] '3.15.0'\n\n\n\nde_paired &lt;- detect_de(\n    cell_group_a = embedding |&gt;\n        dplyr::filter(\n            category == \"JD168\",\n            cluster == 20\n        ) |&gt;\n        dplyr::pull(cell),\n    cell_group_b = embedding |&gt;\n        dplyr::filter(\n            category == \"JD168\",\n            cluster != 20\n        ) |&gt;\n        dplyr::pull(cell),\n    matrix_readcount = matrix_readcount_use,\n    matrix_cpm = calc_cpm(matrix_readcount_use)\n    # only_enrichment = TRUE\n)\n\nde_paired |&gt; head()\n\n                           log2_effect          pval positive_frac_a\nENSMUSG00000037139_Myom3      8.166286 3.152517e-219           0.604\nENSMUSG00000079588_Tmem182    8.050808 5.009801e-140           0.402\nENSMUSG00000026251_Chrnd      7.992256  5.311037e-81           0.238\nENSMUSG00000087591_Gm14635    7.975343 2.164927e-110           0.323\nENSMUSG00000101680_Gm29015    7.963194  4.971533e-89           0.262\nENSMUSG00000102717_Gm37759    7.876779 1.253173e-149           0.439\n                           positive_frac_b norm_reads_mean_a norm_reads_mean_b\nENSMUSG00000037139_Myom3             0.002         1.5196756      0.0018586658\nENSMUSG00000079588_Tmem182           0.002         0.8570739      0.0008143528\nENSMUSG00000026251_Chrnd             0.001         0.2803849      0.0004863366\nENSMUSG00000087591_Gm14635           0.001         0.6266815      0.0006813209\nENSMUSG00000101680_Gm29015           0.001         0.4385369      0.0020254669\nENSMUSG00000102717_Gm37759           0.002         0.7279072      0.0018620079\n                           log2_fc_norm_reads cpm_meam_a cpm_meam_b log2_fc_cpm\nENSMUSG00000037139_Myom3             7.011140  177.63879 0.21767902    9.607811\nENSMUSG00000079588_Tmem182           6.325136  100.13546 0.09540360    9.891957\nENSMUSG00000026251_Chrnd             4.791384   32.73270 0.05698473    8.933125\nENSMUSG00000087591_Gm14635           5.897410   73.21501 0.07976347    9.671992\nENSMUSG00000101680_Gm29015           5.221062   51.29588 0.23699159    7.698518\nENSMUSG00000102717_Gm37759           5.959019   85.12481 0.21819530    8.543336\n                                pval_adj\nENSMUSG00000037139_Myom3   6.067921e-219\nENSMUSG00000079588_Tmem182 8.772996e-140\nENSMUSG00000026251_Chrnd    8.352273e-81\nENSMUSG00000087591_Gm14635 3.606077e-110\nENSMUSG00000101680_Gm29015  7.951628e-89\nENSMUSG00000102717_Gm37759 2.229182e-149\n\n\n\ndim(de_paired)\n\n[1] 1126   11\n\n\n\ngenes_of_interest &lt;- rownames(subset(de_paired, log2_effect &gt; 0))\ngene_universe &lt;- rownames(matrix_readcount_use)\ngenes_formatted &lt;- factor(as.integer(gene_universe %in% genes_of_interest))\nnames(genes_formatted) &lt;- gene_universe\nnames(genes_formatted) &lt;- names(genes_formatted) |&gt;\n    stringr::str_remove(pattern = \"_.+$\")\n\ntopgo_data &lt;- new(\n    \"topGOdata\",\n    ontology = \"BP\",\n    allGenes = genes_formatted,\n    annot = annFUN.org,\n    mapping = \"org.Mm.eg.db\",\n    ID = \"Ensembl\"\n)\n## \n## Building most specific GOs .....\n## Loading required package: org.Mm.eg.db\n## \n##  ( 12572 GO terms found. )\n## \n## Build GO DAG topology ..........\n##  ( 15958 GO terms and 36406 relations. )\n## \n## Annotating nodes ...............\n##  ( 21155 genes annotated to the GO terms. )\n\ntopgo_out_classic_fisher &lt;- topGO::runTest(\n    topgo_data,\n    algorithm = \"classic\",\n    statistic = \"fisher\"\n)\n## \n##           -- Classic Algorithm -- \n## \n##       the algorithm is scoring 5220 nontrivial nodes\n##       parameters: \n##           test statistic: fisher\n\n\nNUM_GO_TERMS &lt;- 15\n\n# prepare data\nenriched_gos &lt;- topGO::GenTable(topgo_data,\n    classicFisher = topgo_out_classic_fisher,\n    topNodes = NUM_GO_TERMS\n) |&gt;\n    dplyr::mutate(\n        classicFisher = as.numeric(\n            stringr::str_replace(classicFisher, \"&lt; \", \"\")\n        ),\n        Term = factor(Term(GO.ID),\n            levels = rev(Term(GO.ID))\n        )\n    )\n\nggplot2::ggplot(\n    enriched_gos,\n    ggplot2::aes(\n        y = -log10(classicFisher),\n        x = Term\n    )\n) +\n    ggplot2::geom_bar(stat = \"identity\", fill = \"grey70\") +\n    ggplot2::coord_flip() +\n    ggplot2::labs(x = NULL) +\n    ggplot2::theme_classic() +\n    ggplot2::scale_y_continuous(\n        name = expression(paste(\"-log\"[10], \" (p-value)\")),\n        breaks = c(0, 30),\n        labels = scales::math_format(10^.x)\n    ) +\n    ggplot2::annotate(\n        geom = \"text\",\n        x = seq_len(nrow(enriched_gos)),\n        y = rep(1, nrow(enriched_gos)),\n        label = rev(enriched_gos$Term),\n        # vjust = \"inward\",\n        hjust = \"inward\",\n        size = 2.5,\n        family = \"Arial\"\n    ) +\n    ggplot2::theme(\n        axis.title = ggplot2::element_text(family = \"Arial\", size = 8),\n        axis.title.y = ggplot2::element_blank(),\n        axis.text = ggplot2::element_text(family = \"Arial\", size = 7),\n        axis.text.y = ggplot2::element_blank(),\n        axis.ticks.y = ggplot2::element_blank(),\n        axis.line.y = ggplot2::element_blank(),\n        legend.text = ggplot2::element_text(family = \"Arial\", size = 8),\n        legend.title = ggplot2::element_text(family = \"Arial\", size = 8)\n    )"
  },
  {
    "objectID": "unbiased_reprogramming.html#enrichment-of-exogenous-factors",
    "href": "unbiased_reprogramming.html#enrichment-of-exogenous-factors",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "Enrichment of exogenous factors",
    "text": "Enrichment of exogenous factors\n\n# clusters_selected &lt;- c(1, 2, 3, 10, 12, 17, 20, 22)\n\nfeatures_selected_43 &lt;- c(\n    \"ENSMUSG00000025930_Msc\",\n    \"ENSMUSG00000026313_Hdac4\",\n    \"ENSMUSG00000026565_Pou2f1\",\n    \"ENSMUSG00000026923_Notch1\",\n    \"ENSMUSG00000015846_Rxra\",\n    \"ENSMUSG00000015627_Gata5\",\n    \"ENSMUSG00000025860_Xiap\",\n    \"ENSMUSG00000040289_Hey1\",\n    \"ENSMUSG00000027833_Shox2\",\n    \"ENSMUSG00000001419_Mef2d\",\n    \"ENSMUSG00000028800_Hdac1\",\n    \"ENSMUSG00000086369_E330017L17Rik\",\n    \"ENSMUSG00000028949_Smarcd3\",\n    \"ENSMUSG00000048450_Msx1\",\n    \"ENSMUSG00000042002_Foxn4\",\n    \"ENSMUSG00000018604_Tbx3\",\n    \"ENSMUSG00000018263_Tbx5\",\n    \"ENSMUSG00000063568_Jazf1\",\n    \"ENSMUSG00000009471_Myod1\",\n    \"ENSMUSG00000030557_Mef2a\",\n    \"ENSMUSG00000030551_Nr2f2\",\n    \"ENSMUSG00000030544_Mesp1\",\n    \"ENSMUSG00000019789_Hey2\",\n    \"ENSMUSG00000019777_Hdac2\",\n    \"ENSMUSG00000020167_Tcf3\",\n    \"ENSMUSG00000038193_Hand2\",\n    \"ENSMUSG00000079033_Mef2b\",\n    \"ENSMUSG00000021944_Gata4\",\n    \"ENSMUSG00000032419_Tbx18\",\n    \"ENSMUSG00000020160_Meis1\",\n    \"ENSMUSG00000037335_Hand1\",\n    \"ENSMUSG00000020542_Myocd\",\n    \"ENSMUSG00000000093_Tbx2\",\n    \"ENSMUSG00000021469_Msx2\",\n    \"ENSMUSG00000005583_Mef2c\",\n    \"ENSMUSG00000042258_Isl1\",\n    \"ENSMUSG00000009739_Pou6f1\",\n    \"ENSMUSG00000001288_Rarg\",\n    \"ENSMUSG00000015579_Nkx2-5\",\n    \"ENSMUSG00000023067_Cdkn1a\",\n    \"ENSMUSG00000024063_Lbh\",\n    \"ENSMUSG00000005836_Gata6\",\n    \"ENSMUSG00000024515_Smad4\"\n)\n\n\nclusters_selected &lt;- c(20, 12, 2)\n\nenriched_factors &lt;- do.call(\n    rbind.data.frame,\n    lapply(clusters_selected, \\(x) {\n        cells_1 &lt;- embedding$cell[\n            embedding$cluster == x & embedding$category == \"JD168\"\n        ]\n        cells_2 &lt;- embedding$cell[\n            embedding$cluster != x & embedding$category == \"JD168\"\n        ]\n        cat(x, length(cells_1), length(cells_2), \"\\n\")\n\n        de_paired &lt;- detect_de(\n            cell_group_a = cells_1,\n            cell_group_b = cells_2,\n            matrix_readcount = matrix_readcount_use,\n            matrix_cpm = calc_cpm(matrix_readcount_use),\n            only_enrichment = TRUE\n        ) |&gt;\n            dplyr::mutate(category = x) |&gt;\n            tibble::rownames_to_column(var = \"feature\") |&gt;\n            dplyr::filter(feature %in% features_selected_43)\n    })\n) |&gt;\n    dplyr::filter(category %in% clusters_selected) |&gt;\n    dplyr::mutate(\n        category = factor(category,\n            levels = clusters_selected\n        ),\n        symbol = stringr::str_remove(\n            string = feature,\n            pattern = \"^.+_\"\n        )\n    )\n\n20 164 8566 \n12 201 8529 \n2 2445 6285 \n\n\n\nDifferential expression analysis of 48F in MEF-derived clusters, as compared with all other reprogrammed cells. Each dot represents a gene (colored by fold change and sized by p value).\n\nggplot2::ggplot() +\n    ggplot2::geom_abline(intercept = 0, slope = 1, linetype = 2) +\n    ggplot2::geom_point(\n        data = enriched_factors,\n        ggplot2::aes(positive_frac_b,\n            positive_frac_a,\n            size = -log10(pval_adj),\n            color = log2_effect\n        ),\n        alpha = .8,\n        stroke = 0, shape = 16\n    ) +\n    ggplot2::facet_wrap(\n        ~category,\n        nrow = 1,\n        labeller = ggplot2::labeller(\n            category = setNames(\n                object = paste(\"Cluster\", clusters_selected),\n                nm = clusters_selected\n            )\n        )\n    ) +\n    ggplot2::coord_fixed() +\n    ggplot2::scale_color_viridis_c(\n        name = expression(paste(\"Log\"[2], \" effect\"))\n    ) +\n    ggplot2::scale_size_continuous(\n        name = expression(paste(\"-log\"[10], \" (p-value)\"))\n    ) +\n    ggplot2::guides(\n        color = ggplot2::guide_colorbar(order = 1),\n        size = ggplot2::guide_legend(order = 2)\n    ) +\n    ggplot2::scale_x_continuous(\n        name = \"Expr (%, other reprogrammed cells)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    ggplot2::scale_y_continuous(\n        name = \"Expr (%, indicated cluster)\",\n        limits = c(0, 1), breaks = seq(0, 1, .2)\n    ) +\n    theme_customized_violin() %+replace%\n    ggplot2::theme(\n        legend.background = ggplot2::element_blank(),\n        legend.margin = ggplot2::margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\"),\n        legend.key.size = ggplot2::unit(2.5, \"mm\"),\n        legend.text = ggplot2::element_text(family = \"Arial\", size = 6),\n        legend.title = ggplot2::element_text(family = \"Arial\", size = 7),\n        legend.position = \"bottom\",\n        legend.box = \"horizontal\",\n        legend.box.background = ggplot2::element_blank()\n    ) +\n    ggrepel::geom_text_repel(\n        data = subset(enriched_factors, symbol %in% c(\n            \"Myod1\", \"Mef2b\",\n            \"Mef2c\", \"Hand2\", \"Gata6\"\n        )),\n        ggplot2::aes(\n            positive_frac_b,\n            positive_frac_a,\n            label = symbol\n        ),\n        #\n        size = 5 / ggplot2::.pt,\n        family = \"Arial\",\n        box.padding = .2,\n        point.padding = .2,\n        nudge_y = .15,\n        arrow = ggplot2::arrow(length = ggplot2::unit(.02, \"npc\")),\n        segment.color = \"grey35\",\n        color = \"black\"\n    )"
  },
  {
    "objectID": "unbiased_reprogramming.html#r-session-info",
    "href": "unbiased_reprogramming.html#r-session-info",
    "title": "Unbiased Reprogramming with 48 Factors by Reprogram-Seq",
    "section": "R session info",
    "text": "R session info\n\ndevtools::session_info()\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31)\n os       macOS Ventura 13.2.1\n system   aarch64, darwin22.1.0\n ui       unknown\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Chicago\n date     2023-03-08\n pandoc   2.19.2 @ /Users/jialei/.pyenv/shims/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package          * version    date (UTC) lib source\n AnnotationDbi    * 1.58.0     2022-04-26 [1] Bioconductor\n Biobase          * 2.56.0     2022-04-26 [1] Bioconductor\n BiocGenerics     * 0.42.0     2022-04-26 [1] Bioconductor\n Biostrings         2.64.1     2022-08-18 [1] Bioconductor\n bit                4.0.5      2022-11-15 [1] CRAN (R 4.2.2)\n bit64              4.0.5      2020-08-30 [1] CRAN (R 4.2.2)\n bitops             1.0-7      2021-04-24 [1] CRAN (R 4.2.2)\n blob               1.2.3      2022-04-10 [1] CRAN (R 4.2.0)\n cachem             1.0.7      2023-02-24 [1] CRAN (R 4.2.2)\n callr              3.7.3      2022-11-02 [1] CRAN (R 4.2.2)\n cli                3.6.0      2023-01-09 [1] CRAN (R 4.2.2)\n colorspace         2.1-0      2023-01-23 [1] CRAN (R 4.2.2)\n commonmark         1.8.1      2022-10-14 [1] CRAN (R 4.2.1)\n crayon             1.5.2      2022-09-29 [1] CRAN (R 4.2.1)\n DBI                1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n devtools           2.4.5.9000 2023-03-08 [1] Github (r-lib/devtools@cfa1ba9)\n digest             0.6.31     2022-12-11 [1] CRAN (R 4.2.2)\n dplyr            * 1.1.0.9000 2023-03-08 [1] Github (tidyverse/dplyr@e12fd49)\n ellipsis           0.3.2      2021-04-29 [1] CRAN (R 4.2.2)\n evaluate           0.20       2023-01-17 [1] CRAN (R 4.2.2)\n extrafont        * 0.19       2023-01-18 [1] CRAN (R 4.2.2)\n extrafontdb        1.0        2012-06-11 [1] CRAN (R 4.2.0)\n fansi              1.0.4      2023-01-22 [1] CRAN (R 4.2.2)\n farver             2.1.1      2022-07-06 [1] CRAN (R 4.2.2)\n fastmap            1.1.1      2023-02-24 [1] CRAN (R 4.2.2)\n forcats          * 1.0.0.9000 2023-01-31 [1] Github (tidyverse/forcats@4a8525a)\n formattable      * 0.2.1      2021-01-07 [1] CRAN (R 4.2.1)\n fs                 1.6.1      2023-02-06 [1] CRAN (R 4.2.2)\n generics           0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n GenomeInfoDb       1.32.4     2022-09-06 [1] Bioconductor\n GenomeInfoDbData   1.2.8      2022-04-22 [1] Bioconductor\n ggplot2          * 3.4.1.9000 2023-03-08 [1] Github (tidyverse/ggplot2@04a5ef2)\n ggrepel            0.9.3      2023-02-03 [1] CRAN (R 4.2.2)\n glue               1.6.2.9000 2023-01-26 [1] Github (tidyverse/glue@794eb37)\n GO.db            * 3.15.0     2022-12-17 [1] Bioconductor\n graph            * 1.74.0     2022-04-26 [1] Bioconductor\n gt                 0.8.0.9000 2023-03-06 [1] Github (rstudio/gt@6272bc5)\n gtable             0.3.1.9000 2022-09-26 [1] Github (r-lib/gtable@2e33c5b)\n hms                1.1.2      2022-08-19 [1] CRAN (R 4.2.1)\n htmltools          0.5.4.9000 2023-02-23 [1] Github (rstudio/htmltools@48c46ed)\n htmlwidgets        1.6.1.9000 2023-01-08 [1] Github (ramnathv/htmlwidgets@843eee9)\n httpuv             1.6.9      2023-02-14 [1] CRAN (R 4.2.2)\n httr               1.4.5      2023-02-24 [1] CRAN (R 4.2.2)\n IRanges          * 2.30.1     2022-08-18 [1] Bioconductor\n jsonlite           1.8.4      2022-12-06 [1] CRAN (R 4.2.2)\n KEGGREST           1.36.3     2022-07-12 [1] Bioconductor\n knitr              1.42       2023-01-25 [1] CRAN (R 4.2.2)\n labeling           0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n later              1.3.0      2021-08-18 [1] CRAN (R 4.2.2)\n lattice            0.20-45    2021-09-22 [2] CRAN (R 4.2.2)\n lifecycle          1.0.3.9000 2023-03-08 [1] Github (r-lib/lifecycle@9ac73f5)\n lubridate        * 1.9.2      2023-02-10 [1] CRAN (R 4.2.2)\n magrittr           2.0.3      2022-03-30 [1] CRAN (R 4.2.2)\n Matrix           * 1.5-3      2022-11-11 [1] CRAN (R 4.2.2)\n matrixStats        0.63.0     2022-11-18 [1] CRAN (R 4.2.2)\n memoise            2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n mime               0.12       2021-09-28 [1] CRAN (R 4.2.2)\n miniUI             0.1.1.1    2018-05-18 [1] CRAN (R 4.2.0)\n munsell            0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n org.Mm.eg.db     * 3.15.0     2022-07-11 [1] Bioconductor\n patchwork        * 1.1.2.9000 2022-08-20 [1] Github (thomasp85/patchwork@c14c960)\n pillar             1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n pkgbuild           1.4.0.9000 2023-02-18 [1] Github (r-lib/pkgbuild@9ec92a0)\n pkgconfig          2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n pkgload            1.3.2      2022-11-16 [1] CRAN (R 4.2.2)\n png                0.1-8      2022-11-29 [1] CRAN (R 4.2.2)\n prettyunits        1.1.1.9000 2022-04-22 [1] Github (r-lib/prettyunits@8706d89)\n processx           3.8.0      2022-10-26 [1] CRAN (R 4.2.1)\n profvis            0.3.7      2020-11-02 [1] CRAN (R 4.2.2)\n promises           1.2.0.1    2021-02-11 [1] CRAN (R 4.2.2)\n ps                 1.7.2      2022-10-26 [1] CRAN (R 4.2.1)\n purrr            * 1.0.1.9000 2023-02-08 [1] Github (tidyverse/purrr@fd5a732)\n R.cache            0.16.0     2022-07-21 [1] CRAN (R 4.2.1)\n R.methodsS3        1.8.2      2022-06-13 [1] CRAN (R 4.2.0)\n R.oo               1.25.0     2022-06-12 [1] CRAN (R 4.2.0)\n R.utils            2.12.2     2022-11-11 [1] CRAN (R 4.2.2)\n R6                 2.5.1.9000 2022-10-29 [1] Github (r-lib/R6@e6b5eaf)\n ragg               1.2.5.9000 2023-03-08 [1] Github (r-lib/ragg@69ad967)\n Rcpp               1.0.10     2023-01-22 [1] CRAN (R 4.2.2)\n RCurl              1.98-1.10  2023-01-27 [1] CRAN (R 4.2.2)\n readr            * 2.1.4.9000 2023-03-02 [1] Github (tidyverse/readr@eeb8f6b)\n remotes            2.4.2.9000 2023-02-18 [1] Github (r-lib/remotes@1e12140)\n rlang              1.1.0      2023-03-08 [1] Github (r-lib/rlang@60159c7)\n rmarkdown          2.20.1     2023-02-10 [1] Github (rstudio/rmarkdown@a75dc37)\n RSQLite            2.3.0      2023-02-17 [1] CRAN (R 4.2.2)\n Rttf2pt1           1.3.12     2023-01-22 [1] CRAN (R 4.2.2)\n S4Vectors        * 0.34.0     2022-04-26 [1] Bioconductor\n sass               0.4.5      2023-01-24 [1] CRAN (R 4.2.2)\n scales             1.2.1.9000 2022-08-20 [1] Github (r-lib/scales@b3df2fb)\n sessioninfo        1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n shiny              1.7.4      2022-12-15 [1] CRAN (R 4.2.2)\n SparseM          * 1.81       2021-02-18 [1] CRAN (R 4.2.1)\n stringi            1.7.12     2023-01-11 [1] CRAN (R 4.2.2)\n stringr          * 1.5.0      2022-12-02 [1] CRAN (R 4.2.2)\n styler           * 1.9.1      2023-03-05 [1] Github (r-lib/styler@57bbf4e)\n systemfonts        1.0.4      2022-02-11 [1] CRAN (R 4.2.2)\n textshaping        0.3.6      2021-10-13 [1] CRAN (R 4.2.2)\n tibble           * 3.2.0.9000 2023-03-08 [1] Github (tidyverse/tibble@a310014)\n tidyr            * 1.3.0.9000 2023-01-25 [1] Github (tidyverse/tidyr@0764e65)\n tidyselect         1.2.0.9000 2023-03-08 [1] Github (r-lib/tidyselect@177a190)\n tidyverse        * 2.0.0.9000 2023-03-08 [1] Github (tidyverse/tidyverse@37018d1)\n timechange         0.2.0      2023-01-11 [1] CRAN (R 4.2.2)\n topGO            * 2.48.0     2022-04-26 [1] Bioconductor\n tzdb               0.3.0      2022-03-28 [1] CRAN (R 4.2.2)\n urlchecker         1.0.1      2021-11-30 [1] CRAN (R 4.2.0)\n usethis            2.1.6.9000 2023-03-08 [1] Github (r-lib/usethis@dac38d0)\n utf8               1.2.3      2023-01-31 [1] CRAN (R 4.2.2)\n vctrs              0.5.2.9000 2023-03-08 [1] Github (r-lib/vctrs@469411a)\n viridisLite        0.4.1      2022-08-22 [1] CRAN (R 4.2.1)\n vroom              1.6.1.9000 2023-02-10 [1] Github (r-lib/vroom@a7769d1)\n withr              2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun               0.37       2023-01-31 [1] CRAN (R 4.2.2)\n xtable             1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n XVector            0.36.0     2022-04-26 [1] Bioconductor\n yaml               2.3.7      2023-01-23 [1] CRAN (R 4.2.2)\n zlibbioc           1.42.0     2022-04-26 [1] Bioconductor\n\n [1] /opt/homebrew/lib/R/4.2/site-library\n [2] /opt/homebrew/Cellar/r/4.2.2_1/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n\n\n\n\nStyling  1  files:\n unbiased_reprogramming.qmd ✔ \n────────────────────────────────────────\nStatus  Count   Legend \n✔   1   File unchanged.\nℹ   0   File changed.\n✖   0   Styling threw an error.\n────────────────────────────────────────"
  }
]